// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: results.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from results.proto</summary>
public static partial class ResultsReflection {

  #region Descriptor
  /// <summary>File descriptor for results.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ResultsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1yZXN1bHRzLnByb3RvIrEBCg1EZWZlY3RBZGRyZXNzEhUKDWRhdGFzZXRf",
          "aW5kZXgYASABKAUSEAoIbW9kZWxfaWQYAiABKAUSFQoNZmVhdHVyZV9pbmRl",
          "eBgDIAEoBRIUCgxvdmVybGFwX2FyZWEYBCABKAESFQoNb3ZlcmxhcF9yYXRp",
          "bxgFIAEoARIeChZvdmVybGFwX3JhdGlvX29mX290aGVyGAYgASgBEhMKC2Zl",
          "YXR1cmVfdWlkGAcgASgJIjwKBlJvd1JMQxIQCghvZmZzZXRfeBgBIAEoBRIQ",
          "CghvZmZzZXRfeRgCIAEoBRIOCgZsZW5ndGgYAyABKAUikQMKDEZlYXR1cmVG",
          "aWVsZBINCgVsYWJlbBgBIAEoCRIMCgRzaG93GAIgASgIEg0KBWNvbG9yGAMg",
          "AygFEg4KBnJlY3RfeBgEIAEoBRIOCgZyZWN0X3kYBSABKAUSDgoGcmVjdF93",
          "GAYgASgFEg4KBnJlY3RfaBgHIAEoBRITCgtwcm9iYWJpbGl0eRgIIAEoARIM",
          "CgRhcmVhGAkgASgBEg4KBmxlbmd0aBgKIAEoARINCgV3aWR0aBgLIAEoARIR",
          "CgltZWFuX2dyYXkYDCABKAESEAoIbWF4X2dyYXkYDSABKAESEAoIbWluX2dy",
          "YXkYDiABKAESDwoHaW5fYXJlYRgPIAMoBRIlCg1vdmVybGFwc193aXRoGBAg",
          "AygLMg4uRGVmZWN0QWRkcmVzcxIRCglyZWN0X3hfbW0YESABKAESEQoJcmVj",
          "dF95X21tGBIgASgBEhEKCXJlY3Rfd19tbRgTIAEoARIRCglyZWN0X2hfbW0Y",
          "FCABKAESGAoHcm93X3JsYxgVIAMoCzIHLlJvd1JMQyK3AQoITWFwRmllbGQS",
          "DQoFbGFiZWwYASABKAkSDAoEc2hvdxgCIAEoCBINCgVjb2xvchgDIAMoBRIe",
          "CghkYXRhdHlwZRgEIAEoDjIMLk1hcERhdGFUeXBlEg8KB2ltYWdlX3cYBSAB",
          "KAUSDwoHaW1hZ2VfaBgGIAEoBRIPCgdpbWFnZV9jGAcgASgFEhYKDnN0YXJ0",
          "X3Bvc2l0aW9uGAggASgFEhQKDGVuZF9wb3NpdGlvbhgJIAEoBSLHAgoLUmVz",
          "dWx0RmllbGQSEwoLbW9kZWxfbGFiZWwYASABKAkSEQoJbW9kZWxfdGFnGAIg",
          "ASgJEhAKCG1vZGVsX2lkGAMgASgFEhIKCmNsYXNzaWZpZXIYBCABKAESGgoS",
          "ZXZhbHVhdGlvbl90aW1lX21zGAUgASgBEh8KF3Bvc3RfcHJvY2Vzc2luZ190",
          "aW1lX21zGAYgASgBEh0KCnJlc3VsdF9tYXAYByADKAsyCS5NYXBGaWVsZBIe",
          "CgdmZWF0dXJlGAggAygLMg0uRmVhdHVyZUZpZWxkEg4KBnRlbmFudBgJIAEo",
          "CRIRCgl0ZW5hbnRfaWQYCiABKAkSGgoSb25ueF92ZXJzaW9uX21ham9yGAsg",
          "ASgFEhoKEm9ubnhfdmVyc2lvbl9taW5vchgMIAEoBRITCgtmZWF0dXJlX3Vp",
          "ZBgNIAEoCSKLAQoHU3VtbWFyeRITCgtpbWFnZV9jbGFzcxgBIAEoBRISCgpj",
          "bGFzc19jb2RlGAIgASgJEhwKFG1vc3RfcmVsZXZhbnRfZGVmZWN0GAMgASgJ",
          "Eh0KFXJlbGV2YW50X2RlZmVjdHNfanNvbhgEIAEoCRIaChJmZWF0dXJlX3Rh",
          "YmxlX2pzb24YBSABKAkiOAoLRmVhdHVyZUluZm8SEwoLZmVhdHVyZV91aWQY",
          "ASABKAkSFAoMZmVhdHVyZV9uYW1lGAIgASgJIs4BCglNb2RlbEluZm8SEQoJ",
          "bW9kZWxfdWlkGAEgASgJEhIKCm1vZGVsX25hbWUYAiABKAkSHgoIZmVhdHVy",
          "ZXMYAyADKAsyDC5GZWF0dXJlSW5mbxIOCgZ0ZW5hbnQYBCABKAkSEgoKdGVu",
          "YW50X3VpZBgFIAEoCRIaChJvbm54X3ZlcnNpb25fbWFqb3IYBiABKAUSGgoS",
          "b25ueF92ZXJzaW9uX21pbm9yGAcgASgFEh4KCm1vZGVsX3R5cGUYCCABKA4y",
          "Ci5Nb2RlbFR5cGUi7wIKB1Jlc3VsdHMSHAoGb3V0cHV0GAEgAygLMgwuUmVz",
          "dWx0RmllbGQSGAoQb3JpZ2luYWxfaW1hZ2VfdxgCIAEoBRIYChBvcmlnaW5h",
          "bF9pbWFnZV9oGAMgASgFEhgKEG9yaWdpbmFsX2ltYWdlX2MYBCABKAUSGwoT",
          "b3JpZ2luYWxfaW1hZ2Vfd19tbRgFIAEoARIbChNvcmlnaW5hbF9pbWFnZV9o",
          "X21tGAYgASgBEhsKE29yaWdpbmFsX2ltYWdlX2NfbW0YByABKAESHQoVbWVh",
          "bl9ncmF5X2FjdGl2ZV9hcmVhGAggASgBEiAKDnJlc3VsdF9zdW1tYXJ5GAkg",
          "ASgLMgguU3VtbWFyeRIcChRtaW5fZ3JheV9hY3RpdmVfYXJlYRgKIAEoARIc",
          "ChRtYXhfZ3JheV9hY3RpdmVfYXJlYRgLIAEoARIkChBhdmFpbGFibGVfbW9k",
          "ZWxzGAwgAygLMgouTW9kZWxJbmZvIswCCgxNb2RlbE9wdGlvbnMSEwoLZGVh",
          "Y3RpdmF0ZWQYASABKAgSIAoYbWluU2VnbWVudGF0aW9uVGhyZXNob2xkGAIg",
          "ASgBEhQKDG1pbkdyYXlWYWx1ZRgDIAEoARIUCgxtYXhHcmF5VmFsdWUYBCAB",
          "KAESGAoQbWF4TWVhbkdyYXlWYWx1ZRgFIAEoARIWCg5taW5Qcm9iYWJpbGl0",
          "eRgGIAEoARIRCgltaW5MZW5ndGgYByABKAESEAoIbWluV2lkdGgYCCABKAES",
          "EQoJbWluSGVpZ2h0GAkgASgBEg8KB21pbkFyZWEYCiABKAESGgoSbWluSW1h",
          "Z2VDbGFzc2lmaWVyGAsgASgBEhUKDWRlZXBHcmF5TGV2ZWwYDCABKAESEAoI",
          "cHJpb3JpdHkYDSABKAUSGQoRb25seUJvdW5kaW5nQm94ZXMYDiABKAgijgMK",
          "D09wdGlvbkNvbnRhaW5lchIuCgdvcHRpb25zGAEgAygLMh0uT3B0aW9uQ29u",
          "dGFpbmVyLk9wdGlvbnNFbnRyeRIRCglkaXZpc29yX3cYAiABKAUSEQoJZGl2",
          "aXNvcl9oGAMgASgFEhIKCmJhdGNoX3NpemUYBCABKAUSIAoYbmV0d29ya19p",
          "bWdfcHJlc2NhbGluZ193GAUgASgFEiAKGG5ldHdvcmtfaW1nX3ByZXNjYWxp",
          "bmdfaBgGIAEoBRIgChhuZXR3b3JrX2ltZ19wcmVzY2FsaW5nX2MYByABKAUS",
          "EAoIYm9yZGVyX3cYCCABKAUSEAoIYm9yZGVyX2gYCSABKAUSEgoKYm9yZGVy",
          "X3dfchgKIAEoBRISCgpib3JkZXJfaF9iGAsgASgFEg8KB2NlbGxzX3cYDCAB",
          "KAUSDwoHY2VsbHNfaBgNIAEoBRo9CgxPcHRpb25zRW50cnkSCwoDa2V5GAEg",
          "ASgFEhwKBXZhbHVlGAIgASgLMg0uTW9kZWxPcHRpb25zOgI4ASLOAQoGRGV2",
          "aWNlEhEKCWRldmljZV9pZBgBIAEoBRIZCgR0eXBlGAIgASgOMgsuRGV2aWNl",
          "VHlwZRIMCgRuYW1lGAMgASgJEhMKC21lbW9yeV9zaXplGAQgASgDEhIKCmlu",
          "dGVncmF0ZWQYBSABKAgSEQoJY3VkYV91dWlkGAYgASgJEiUKHWN1ZGFfY29t",
          "cHV0ZV9jYXBhYmlsaXR5X21ham9yGAcgASgFEiUKHWN1ZGFfY29tcHV0ZV9j",
          "YXBhYmlsaXR5X21pbm9yGAggASgFIiwKEURldmljZUluZm9ybWF0aW9uEhcK",
          "BmRldmljZRgBIAMoCzIHLkRldmljZSrKAQoLTWFwRGF0YVR5cGUSDAoITUFQ",
          "X0lOVDgQABINCglNQVBfSU5UMTYQARINCglNQVBfSU5UMzIQAhINCglNQVBf",
          "SU5UNjQQAxINCglNQVBfVUlOVDgQBBIOCgpNQVBfVUlOVDE2EAUSDgoKTUFQ",
          "X1VJTlQzMhAGEg4KCk1BUF9VSU5UNjQQBxIOCgpNQVBfRkxPQVQ4EAgSDwoL",
          "TUFQX0ZMT0FUMTYQCRIPCgtNQVBfRkxPQVQzMhAKEg8KC01BUF9GTE9BVDY0",
          "EAsqLQoJTW9kZWxUeXBlEgsKB1JFR1VMQVIQABITCg9BUkVBX0RFRklOSVRJ",
          "T04QASotCgpEZXZpY2VUeXBlEg0KCVVOREVGSU5FRBAAEgcKA0NQVRABEgcK",
          "A0dQVRACYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MapDataType), typeof(global::ModelType), typeof(global::DeviceType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DefectAddress), global::DefectAddress.Parser, new[]{ "DatasetIndex", "ModelId", "FeatureIndex", "OverlapArea", "OverlapRatio", "OverlapRatioOfOther", "FeatureUid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RowRLC), global::RowRLC.Parser, new[]{ "OffsetX", "OffsetY", "Length" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FeatureField), global::FeatureField.Parser, new[]{ "Label", "Show", "Color", "RectX", "RectY", "RectW", "RectH", "Probability", "Area", "Length", "Width", "MeanGray", "MaxGray", "MinGray", "InArea", "OverlapsWith", "RectXMm", "RectYMm", "RectWMm", "RectHMm", "RowRlc" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MapField), global::MapField.Parser, new[]{ "Label", "Show", "Color", "Datatype", "ImageW", "ImageH", "ImageC", "StartPosition", "EndPosition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResultField), global::ResultField.Parser, new[]{ "ModelLabel", "ModelTag", "ModelId", "Classifier", "EvaluationTimeMs", "PostProcessingTimeMs", "ResultMap", "Feature", "Tenant", "TenantId", "OnnxVersionMajor", "OnnxVersionMinor", "FeatureUid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Summary), global::Summary.Parser, new[]{ "ImageClass", "ClassCode", "MostRelevantDefect", "RelevantDefectsJson", "FeatureTableJson" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FeatureInfo), global::FeatureInfo.Parser, new[]{ "FeatureUid", "FeatureName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModelInfo), global::ModelInfo.Parser, new[]{ "ModelUid", "ModelName", "Features", "Tenant", "TenantUid", "OnnxVersionMajor", "OnnxVersionMinor", "ModelType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Results), global::Results.Parser, new[]{ "Output", "OriginalImageW", "OriginalImageH", "OriginalImageC", "OriginalImageWMm", "OriginalImageHMm", "OriginalImageCMm", "MeanGrayActiveArea", "ResultSummary", "MinGrayActiveArea", "MaxGrayActiveArea", "AvailableModels" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModelOptions), global::ModelOptions.Parser, new[]{ "Deactivated", "MinSegmentationThreshold", "MinGrayValue", "MaxGrayValue", "MaxMeanGrayValue", "MinProbability", "MinLength", "MinWidth", "MinHeight", "MinArea", "MinImageClassifier", "DeepGrayLevel", "Priority", "OnlyBoundingBoxes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OptionContainer), global::OptionContainer.Parser, new[]{ "Options", "DivisorW", "DivisorH", "BatchSize", "NetworkImgPrescalingW", "NetworkImgPrescalingH", "NetworkImgPrescalingC", "BorderW", "BorderH", "BorderWR", "BorderHB", "CellsW", "CellsH" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::Device), global::Device.Parser, new[]{ "DeviceId", "Type", "Name", "MemorySize", "Integrated", "CudaUuid", "CudaComputeCapabilityMajor", "CudaComputeCapabilityMinor" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceInformation), global::DeviceInformation.Parser, new[]{ "Device" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum MapDataType {
  [pbr::OriginalName("MAP_INT8")] MapInt8 = 0,
  [pbr::OriginalName("MAP_INT16")] MapInt16 = 1,
  [pbr::OriginalName("MAP_INT32")] MapInt32 = 2,
  [pbr::OriginalName("MAP_INT64")] MapInt64 = 3,
  [pbr::OriginalName("MAP_UINT8")] MapUint8 = 4,
  [pbr::OriginalName("MAP_UINT16")] MapUint16 = 5,
  [pbr::OriginalName("MAP_UINT32")] MapUint32 = 6,
  [pbr::OriginalName("MAP_UINT64")] MapUint64 = 7,
  [pbr::OriginalName("MAP_FLOAT8")] MapFloat8 = 8,
  [pbr::OriginalName("MAP_FLOAT16")] MapFloat16 = 9,
  [pbr::OriginalName("MAP_FLOAT32")] MapFloat32 = 10,
  [pbr::OriginalName("MAP_FLOAT64")] MapFloat64 = 11,
}

public enum ModelType {
  [pbr::OriginalName("REGULAR")] Regular = 0,
  [pbr::OriginalName("AREA_DEFINITION")] AreaDefinition = 1,
}

public enum DeviceType {
  [pbr::OriginalName("UNDEFINED")] Undefined = 0,
  [pbr::OriginalName("CPU")] Cpu = 1,
  [pbr::OriginalName("GPU")] Gpu = 2,
}

#endregion

#region Messages
public sealed partial class DefectAddress : pb::IMessage<DefectAddress>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DefectAddress> _parser = new pb::MessageParser<DefectAddress>(() => new DefectAddress());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DefectAddress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DefectAddress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DefectAddress(DefectAddress other) : this() {
    datasetIndex_ = other.datasetIndex_;
    modelId_ = other.modelId_;
    featureIndex_ = other.featureIndex_;
    overlapArea_ = other.overlapArea_;
    overlapRatio_ = other.overlapRatio_;
    overlapRatioOfOther_ = other.overlapRatioOfOther_;
    featureUid_ = other.featureUid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DefectAddress Clone() {
    return new DefectAddress(this);
  }

  /// <summary>Field number for the "dataset_index" field.</summary>
  public const int DatasetIndexFieldNumber = 1;
  private int datasetIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DatasetIndex {
    get { return datasetIndex_; }
    set {
      datasetIndex_ = value;
    }
  }

  /// <summary>Field number for the "model_id" field.</summary>
  public const int ModelIdFieldNumber = 2;
  private int modelId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ModelId {
    get { return modelId_; }
    set {
      modelId_ = value;
    }
  }

  /// <summary>Field number for the "feature_index" field.</summary>
  public const int FeatureIndexFieldNumber = 3;
  private int featureIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FeatureIndex {
    get { return featureIndex_; }
    set {
      featureIndex_ = value;
    }
  }

  /// <summary>Field number for the "overlap_area" field.</summary>
  public const int OverlapAreaFieldNumber = 4;
  private double overlapArea_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double OverlapArea {
    get { return overlapArea_; }
    set {
      overlapArea_ = value;
    }
  }

  /// <summary>Field number for the "overlap_ratio" field.</summary>
  public const int OverlapRatioFieldNumber = 5;
  private double overlapRatio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double OverlapRatio {
    get { return overlapRatio_; }
    set {
      overlapRatio_ = value;
    }
  }

  /// <summary>Field number for the "overlap_ratio_of_other" field.</summary>
  public const int OverlapRatioOfOtherFieldNumber = 6;
  private double overlapRatioOfOther_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double OverlapRatioOfOther {
    get { return overlapRatioOfOther_; }
    set {
      overlapRatioOfOther_ = value;
    }
  }

  /// <summary>Field number for the "feature_uid" field.</summary>
  public const int FeatureUidFieldNumber = 7;
  private string featureUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FeatureUid {
    get { return featureUid_; }
    set {
      featureUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DefectAddress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DefectAddress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DatasetIndex != other.DatasetIndex) return false;
    if (ModelId != other.ModelId) return false;
    if (FeatureIndex != other.FeatureIndex) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OverlapArea, other.OverlapArea)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OverlapRatio, other.OverlapRatio)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OverlapRatioOfOther, other.OverlapRatioOfOther)) return false;
    if (FeatureUid != other.FeatureUid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DatasetIndex != 0) hash ^= DatasetIndex.GetHashCode();
    if (ModelId != 0) hash ^= ModelId.GetHashCode();
    if (FeatureIndex != 0) hash ^= FeatureIndex.GetHashCode();
    if (OverlapArea != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OverlapArea);
    if (OverlapRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OverlapRatio);
    if (OverlapRatioOfOther != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OverlapRatioOfOther);
    if (FeatureUid.Length != 0) hash ^= FeatureUid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (DatasetIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DatasetIndex);
    }
    if (ModelId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ModelId);
    }
    if (FeatureIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FeatureIndex);
    }
    if (OverlapArea != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(OverlapArea);
    }
    if (OverlapRatio != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(OverlapRatio);
    }
    if (OverlapRatioOfOther != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(OverlapRatioOfOther);
    }
    if (FeatureUid.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(FeatureUid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (DatasetIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DatasetIndex);
    }
    if (ModelId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ModelId);
    }
    if (FeatureIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FeatureIndex);
    }
    if (OverlapArea != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(OverlapArea);
    }
    if (OverlapRatio != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(OverlapRatio);
    }
    if (OverlapRatioOfOther != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(OverlapRatioOfOther);
    }
    if (FeatureUid.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(FeatureUid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DatasetIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DatasetIndex);
    }
    if (ModelId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
    }
    if (FeatureIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeatureIndex);
    }
    if (OverlapArea != 0D) {
      size += 1 + 8;
    }
    if (OverlapRatio != 0D) {
      size += 1 + 8;
    }
    if (OverlapRatioOfOther != 0D) {
      size += 1 + 8;
    }
    if (FeatureUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureUid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DefectAddress other) {
    if (other == null) {
      return;
    }
    if (other.DatasetIndex != 0) {
      DatasetIndex = other.DatasetIndex;
    }
    if (other.ModelId != 0) {
      ModelId = other.ModelId;
    }
    if (other.FeatureIndex != 0) {
      FeatureIndex = other.FeatureIndex;
    }
    if (other.OverlapArea != 0D) {
      OverlapArea = other.OverlapArea;
    }
    if (other.OverlapRatio != 0D) {
      OverlapRatio = other.OverlapRatio;
    }
    if (other.OverlapRatioOfOther != 0D) {
      OverlapRatioOfOther = other.OverlapRatioOfOther;
    }
    if (other.FeatureUid.Length != 0) {
      FeatureUid = other.FeatureUid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DatasetIndex = input.ReadInt32();
          break;
        }
        case 16: {
          ModelId = input.ReadInt32();
          break;
        }
        case 24: {
          FeatureIndex = input.ReadInt32();
          break;
        }
        case 33: {
          OverlapArea = input.ReadDouble();
          break;
        }
        case 41: {
          OverlapRatio = input.ReadDouble();
          break;
        }
        case 49: {
          OverlapRatioOfOther = input.ReadDouble();
          break;
        }
        case 58: {
          FeatureUid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DatasetIndex = input.ReadInt32();
          break;
        }
        case 16: {
          ModelId = input.ReadInt32();
          break;
        }
        case 24: {
          FeatureIndex = input.ReadInt32();
          break;
        }
        case 33: {
          OverlapArea = input.ReadDouble();
          break;
        }
        case 41: {
          OverlapRatio = input.ReadDouble();
          break;
        }
        case 49: {
          OverlapRatioOfOther = input.ReadDouble();
          break;
        }
        case 58: {
          FeatureUid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RowRLC : pb::IMessage<RowRLC>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RowRLC> _parser = new pb::MessageParser<RowRLC>(() => new RowRLC());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RowRLC> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RowRLC() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RowRLC(RowRLC other) : this() {
    offsetX_ = other.offsetX_;
    offsetY_ = other.offsetY_;
    length_ = other.length_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RowRLC Clone() {
    return new RowRLC(this);
  }

  /// <summary>Field number for the "offset_x" field.</summary>
  public const int OffsetXFieldNumber = 1;
  private int offsetX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OffsetX {
    get { return offsetX_; }
    set {
      offsetX_ = value;
    }
  }

  /// <summary>Field number for the "offset_y" field.</summary>
  public const int OffsetYFieldNumber = 2;
  private int offsetY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OffsetY {
    get { return offsetY_; }
    set {
      offsetY_ = value;
    }
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 3;
  private int length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RowRLC);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RowRLC other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OffsetX != other.OffsetX) return false;
    if (OffsetY != other.OffsetY) return false;
    if (Length != other.Length) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OffsetX != 0) hash ^= OffsetX.GetHashCode();
    if (OffsetY != 0) hash ^= OffsetY.GetHashCode();
    if (Length != 0) hash ^= Length.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (OffsetX != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OffsetX);
    }
    if (OffsetY != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OffsetY);
    }
    if (Length != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Length);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (OffsetX != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OffsetX);
    }
    if (OffsetY != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OffsetY);
    }
    if (Length != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Length);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OffsetX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffsetX);
    }
    if (OffsetY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffsetY);
    }
    if (Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RowRLC other) {
    if (other == null) {
      return;
    }
    if (other.OffsetX != 0) {
      OffsetX = other.OffsetX;
    }
    if (other.OffsetY != 0) {
      OffsetY = other.OffsetY;
    }
    if (other.Length != 0) {
      Length = other.Length;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OffsetX = input.ReadInt32();
          break;
        }
        case 16: {
          OffsetY = input.ReadInt32();
          break;
        }
        case 24: {
          Length = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          OffsetX = input.ReadInt32();
          break;
        }
        case 16: {
          OffsetY = input.ReadInt32();
          break;
        }
        case 24: {
          Length = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class FeatureField : pb::IMessage<FeatureField>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<FeatureField> _parser = new pb::MessageParser<FeatureField>(() => new FeatureField());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FeatureField> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeatureField() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeatureField(FeatureField other) : this() {
    label_ = other.label_;
    show_ = other.show_;
    color_ = other.color_.Clone();
    rectX_ = other.rectX_;
    rectY_ = other.rectY_;
    rectW_ = other.rectW_;
    rectH_ = other.rectH_;
    probability_ = other.probability_;
    area_ = other.area_;
    length_ = other.length_;
    width_ = other.width_;
    meanGray_ = other.meanGray_;
    maxGray_ = other.maxGray_;
    minGray_ = other.minGray_;
    inArea_ = other.inArea_.Clone();
    overlapsWith_ = other.overlapsWith_.Clone();
    rectXMm_ = other.rectXMm_;
    rectYMm_ = other.rectYMm_;
    rectWMm_ = other.rectWMm_;
    rectHMm_ = other.rectHMm_;
    rowRlc_ = other.rowRlc_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeatureField Clone() {
    return new FeatureField(this);
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 1;
  private string label_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Label {
    get { return label_; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "show" field.</summary>
  public const int ShowFieldNumber = 2;
  private bool show_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Show {
    get { return show_; }
    set {
      show_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_color_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> color_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Color {
    get { return color_; }
  }

  /// <summary>Field number for the "rect_x" field.</summary>
  public const int RectXFieldNumber = 4;
  private int rectX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RectX {
    get { return rectX_; }
    set {
      rectX_ = value;
    }
  }

  /// <summary>Field number for the "rect_y" field.</summary>
  public const int RectYFieldNumber = 5;
  private int rectY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RectY {
    get { return rectY_; }
    set {
      rectY_ = value;
    }
  }

  /// <summary>Field number for the "rect_w" field.</summary>
  public const int RectWFieldNumber = 6;
  private int rectW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RectW {
    get { return rectW_; }
    set {
      rectW_ = value;
    }
  }

  /// <summary>Field number for the "rect_h" field.</summary>
  public const int RectHFieldNumber = 7;
  private int rectH_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RectH {
    get { return rectH_; }
    set {
      rectH_ = value;
    }
  }

  /// <summary>Field number for the "probability" field.</summary>
  public const int ProbabilityFieldNumber = 8;
  private double probability_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Probability {
    get { return probability_; }
    set {
      probability_ = value;
    }
  }

  /// <summary>Field number for the "area" field.</summary>
  public const int AreaFieldNumber = 9;
  private double area_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Area {
    get { return area_; }
    set {
      area_ = value;
    }
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 10;
  private double length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 11;
  private double width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "mean_gray" field.</summary>
  public const int MeanGrayFieldNumber = 12;
  private double meanGray_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MeanGray {
    get { return meanGray_; }
    set {
      meanGray_ = value;
    }
  }

  /// <summary>Field number for the "max_gray" field.</summary>
  public const int MaxGrayFieldNumber = 13;
  private double maxGray_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MaxGray {
    get { return maxGray_; }
    set {
      maxGray_ = value;
    }
  }

  /// <summary>Field number for the "min_gray" field.</summary>
  public const int MinGrayFieldNumber = 14;
  private double minGray_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinGray {
    get { return minGray_; }
    set {
      minGray_ = value;
    }
  }

  /// <summary>Field number for the "in_area" field.</summary>
  public const int InAreaFieldNumber = 15;
  private static readonly pb::FieldCodec<int> _repeated_inArea_codec
      = pb::FieldCodec.ForInt32(122);
  private readonly pbc::RepeatedField<int> inArea_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> InArea {
    get { return inArea_; }
  }

  /// <summary>Field number for the "overlaps_with" field.</summary>
  public const int OverlapsWithFieldNumber = 16;
  private static readonly pb::FieldCodec<global::DefectAddress> _repeated_overlapsWith_codec
      = pb::FieldCodec.ForMessage(130, global::DefectAddress.Parser);
  private readonly pbc::RepeatedField<global::DefectAddress> overlapsWith_ = new pbc::RepeatedField<global::DefectAddress>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DefectAddress> OverlapsWith {
    get { return overlapsWith_; }
  }

  /// <summary>Field number for the "rect_x_mm" field.</summary>
  public const int RectXMmFieldNumber = 17;
  private double rectXMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RectXMm {
    get { return rectXMm_; }
    set {
      rectXMm_ = value;
    }
  }

  /// <summary>Field number for the "rect_y_mm" field.</summary>
  public const int RectYMmFieldNumber = 18;
  private double rectYMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RectYMm {
    get { return rectYMm_; }
    set {
      rectYMm_ = value;
    }
  }

  /// <summary>Field number for the "rect_w_mm" field.</summary>
  public const int RectWMmFieldNumber = 19;
  private double rectWMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RectWMm {
    get { return rectWMm_; }
    set {
      rectWMm_ = value;
    }
  }

  /// <summary>Field number for the "rect_h_mm" field.</summary>
  public const int RectHMmFieldNumber = 20;
  private double rectHMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double RectHMm {
    get { return rectHMm_; }
    set {
      rectHMm_ = value;
    }
  }

  /// <summary>Field number for the "row_rlc" field.</summary>
  public const int RowRlcFieldNumber = 21;
  private static readonly pb::FieldCodec<global::RowRLC> _repeated_rowRlc_codec
      = pb::FieldCodec.ForMessage(170, global::RowRLC.Parser);
  private readonly pbc::RepeatedField<global::RowRLC> rowRlc_ = new pbc::RepeatedField<global::RowRLC>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RowRLC> RowRlc {
    get { return rowRlc_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FeatureField);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FeatureField other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Label != other.Label) return false;
    if (Show != other.Show) return false;
    if(!color_.Equals(other.color_)) return false;
    if (RectX != other.RectX) return false;
    if (RectY != other.RectY) return false;
    if (RectW != other.RectW) return false;
    if (RectH != other.RectH) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Probability, other.Probability)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Area, other.Area)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Length, other.Length)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Width, other.Width)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MeanGray, other.MeanGray)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxGray, other.MaxGray)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinGray, other.MinGray)) return false;
    if(!inArea_.Equals(other.inArea_)) return false;
    if(!overlapsWith_.Equals(other.overlapsWith_)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RectXMm, other.RectXMm)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RectYMm, other.RectYMm)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RectWMm, other.RectWMm)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RectHMm, other.RectHMm)) return false;
    if(!rowRlc_.Equals(other.rowRlc_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Label.Length != 0) hash ^= Label.GetHashCode();
    if (Show != false) hash ^= Show.GetHashCode();
    hash ^= color_.GetHashCode();
    if (RectX != 0) hash ^= RectX.GetHashCode();
    if (RectY != 0) hash ^= RectY.GetHashCode();
    if (RectW != 0) hash ^= RectW.GetHashCode();
    if (RectH != 0) hash ^= RectH.GetHashCode();
    if (Probability != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Probability);
    if (Area != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Area);
    if (Length != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Length);
    if (Width != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Width);
    if (MeanGray != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MeanGray);
    if (MaxGray != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxGray);
    if (MinGray != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinGray);
    hash ^= inArea_.GetHashCode();
    hash ^= overlapsWith_.GetHashCode();
    if (RectXMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RectXMm);
    if (RectYMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RectYMm);
    if (RectWMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RectWMm);
    if (RectHMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RectHMm);
    hash ^= rowRlc_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Label.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Label);
    }
    if (Show != false) {
      output.WriteRawTag(16);
      output.WriteBool(Show);
    }
    color_.WriteTo(output, _repeated_color_codec);
    if (RectX != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RectX);
    }
    if (RectY != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(RectY);
    }
    if (RectW != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RectW);
    }
    if (RectH != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(RectH);
    }
    if (Probability != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(Probability);
    }
    if (Area != 0D) {
      output.WriteRawTag(73);
      output.WriteDouble(Area);
    }
    if (Length != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(Length);
    }
    if (Width != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(Width);
    }
    if (MeanGray != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(MeanGray);
    }
    if (MaxGray != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(MaxGray);
    }
    if (MinGray != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(MinGray);
    }
    inArea_.WriteTo(output, _repeated_inArea_codec);
    overlapsWith_.WriteTo(output, _repeated_overlapsWith_codec);
    if (RectXMm != 0D) {
      output.WriteRawTag(137, 1);
      output.WriteDouble(RectXMm);
    }
    if (RectYMm != 0D) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(RectYMm);
    }
    if (RectWMm != 0D) {
      output.WriteRawTag(153, 1);
      output.WriteDouble(RectWMm);
    }
    if (RectHMm != 0D) {
      output.WriteRawTag(161, 1);
      output.WriteDouble(RectHMm);
    }
    rowRlc_.WriteTo(output, _repeated_rowRlc_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Label.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Label);
    }
    if (Show != false) {
      output.WriteRawTag(16);
      output.WriteBool(Show);
    }
    color_.WriteTo(ref output, _repeated_color_codec);
    if (RectX != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RectX);
    }
    if (RectY != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(RectY);
    }
    if (RectW != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RectW);
    }
    if (RectH != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(RectH);
    }
    if (Probability != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(Probability);
    }
    if (Area != 0D) {
      output.WriteRawTag(73);
      output.WriteDouble(Area);
    }
    if (Length != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(Length);
    }
    if (Width != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(Width);
    }
    if (MeanGray != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(MeanGray);
    }
    if (MaxGray != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(MaxGray);
    }
    if (MinGray != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(MinGray);
    }
    inArea_.WriteTo(ref output, _repeated_inArea_codec);
    overlapsWith_.WriteTo(ref output, _repeated_overlapsWith_codec);
    if (RectXMm != 0D) {
      output.WriteRawTag(137, 1);
      output.WriteDouble(RectXMm);
    }
    if (RectYMm != 0D) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(RectYMm);
    }
    if (RectWMm != 0D) {
      output.WriteRawTag(153, 1);
      output.WriteDouble(RectWMm);
    }
    if (RectHMm != 0D) {
      output.WriteRawTag(161, 1);
      output.WriteDouble(RectHMm);
    }
    rowRlc_.WriteTo(ref output, _repeated_rowRlc_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Label.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (Show != false) {
      size += 1 + 1;
    }
    size += color_.CalculateSize(_repeated_color_codec);
    if (RectX != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RectX);
    }
    if (RectY != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RectY);
    }
    if (RectW != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RectW);
    }
    if (RectH != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RectH);
    }
    if (Probability != 0D) {
      size += 1 + 8;
    }
    if (Area != 0D) {
      size += 1 + 8;
    }
    if (Length != 0D) {
      size += 1 + 8;
    }
    if (Width != 0D) {
      size += 1 + 8;
    }
    if (MeanGray != 0D) {
      size += 1 + 8;
    }
    if (MaxGray != 0D) {
      size += 1 + 8;
    }
    if (MinGray != 0D) {
      size += 1 + 8;
    }
    size += inArea_.CalculateSize(_repeated_inArea_codec);
    size += overlapsWith_.CalculateSize(_repeated_overlapsWith_codec);
    if (RectXMm != 0D) {
      size += 2 + 8;
    }
    if (RectYMm != 0D) {
      size += 2 + 8;
    }
    if (RectWMm != 0D) {
      size += 2 + 8;
    }
    if (RectHMm != 0D) {
      size += 2 + 8;
    }
    size += rowRlc_.CalculateSize(_repeated_rowRlc_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FeatureField other) {
    if (other == null) {
      return;
    }
    if (other.Label.Length != 0) {
      Label = other.Label;
    }
    if (other.Show != false) {
      Show = other.Show;
    }
    color_.Add(other.color_);
    if (other.RectX != 0) {
      RectX = other.RectX;
    }
    if (other.RectY != 0) {
      RectY = other.RectY;
    }
    if (other.RectW != 0) {
      RectW = other.RectW;
    }
    if (other.RectH != 0) {
      RectH = other.RectH;
    }
    if (other.Probability != 0D) {
      Probability = other.Probability;
    }
    if (other.Area != 0D) {
      Area = other.Area;
    }
    if (other.Length != 0D) {
      Length = other.Length;
    }
    if (other.Width != 0D) {
      Width = other.Width;
    }
    if (other.MeanGray != 0D) {
      MeanGray = other.MeanGray;
    }
    if (other.MaxGray != 0D) {
      MaxGray = other.MaxGray;
    }
    if (other.MinGray != 0D) {
      MinGray = other.MinGray;
    }
    inArea_.Add(other.inArea_);
    overlapsWith_.Add(other.overlapsWith_);
    if (other.RectXMm != 0D) {
      RectXMm = other.RectXMm;
    }
    if (other.RectYMm != 0D) {
      RectYMm = other.RectYMm;
    }
    if (other.RectWMm != 0D) {
      RectWMm = other.RectWMm;
    }
    if (other.RectHMm != 0D) {
      RectHMm = other.RectHMm;
    }
    rowRlc_.Add(other.rowRlc_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Label = input.ReadString();
          break;
        }
        case 16: {
          Show = input.ReadBool();
          break;
        }
        case 26:
        case 24: {
          color_.AddEntriesFrom(input, _repeated_color_codec);
          break;
        }
        case 32: {
          RectX = input.ReadInt32();
          break;
        }
        case 40: {
          RectY = input.ReadInt32();
          break;
        }
        case 48: {
          RectW = input.ReadInt32();
          break;
        }
        case 56: {
          RectH = input.ReadInt32();
          break;
        }
        case 65: {
          Probability = input.ReadDouble();
          break;
        }
        case 73: {
          Area = input.ReadDouble();
          break;
        }
        case 81: {
          Length = input.ReadDouble();
          break;
        }
        case 89: {
          Width = input.ReadDouble();
          break;
        }
        case 97: {
          MeanGray = input.ReadDouble();
          break;
        }
        case 105: {
          MaxGray = input.ReadDouble();
          break;
        }
        case 113: {
          MinGray = input.ReadDouble();
          break;
        }
        case 122:
        case 120: {
          inArea_.AddEntriesFrom(input, _repeated_inArea_codec);
          break;
        }
        case 130: {
          overlapsWith_.AddEntriesFrom(input, _repeated_overlapsWith_codec);
          break;
        }
        case 137: {
          RectXMm = input.ReadDouble();
          break;
        }
        case 145: {
          RectYMm = input.ReadDouble();
          break;
        }
        case 153: {
          RectWMm = input.ReadDouble();
          break;
        }
        case 161: {
          RectHMm = input.ReadDouble();
          break;
        }
        case 170: {
          rowRlc_.AddEntriesFrom(input, _repeated_rowRlc_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Label = input.ReadString();
          break;
        }
        case 16: {
          Show = input.ReadBool();
          break;
        }
        case 26:
        case 24: {
          color_.AddEntriesFrom(ref input, _repeated_color_codec);
          break;
        }
        case 32: {
          RectX = input.ReadInt32();
          break;
        }
        case 40: {
          RectY = input.ReadInt32();
          break;
        }
        case 48: {
          RectW = input.ReadInt32();
          break;
        }
        case 56: {
          RectH = input.ReadInt32();
          break;
        }
        case 65: {
          Probability = input.ReadDouble();
          break;
        }
        case 73: {
          Area = input.ReadDouble();
          break;
        }
        case 81: {
          Length = input.ReadDouble();
          break;
        }
        case 89: {
          Width = input.ReadDouble();
          break;
        }
        case 97: {
          MeanGray = input.ReadDouble();
          break;
        }
        case 105: {
          MaxGray = input.ReadDouble();
          break;
        }
        case 113: {
          MinGray = input.ReadDouble();
          break;
        }
        case 122:
        case 120: {
          inArea_.AddEntriesFrom(ref input, _repeated_inArea_codec);
          break;
        }
        case 130: {
          overlapsWith_.AddEntriesFrom(ref input, _repeated_overlapsWith_codec);
          break;
        }
        case 137: {
          RectXMm = input.ReadDouble();
          break;
        }
        case 145: {
          RectYMm = input.ReadDouble();
          break;
        }
        case 153: {
          RectWMm = input.ReadDouble();
          break;
        }
        case 161: {
          RectHMm = input.ReadDouble();
          break;
        }
        case 170: {
          rowRlc_.AddEntriesFrom(ref input, _repeated_rowRlc_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// requires complementary array of type "datatype"
/// </summary>
public sealed partial class MapField : pb::IMessage<MapField>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MapField> _parser = new pb::MessageParser<MapField>(() => new MapField());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MapField> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapField() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapField(MapField other) : this() {
    label_ = other.label_;
    show_ = other.show_;
    color_ = other.color_.Clone();
    datatype_ = other.datatype_;
    imageW_ = other.imageW_;
    imageH_ = other.imageH_;
    imageC_ = other.imageC_;
    startPosition_ = other.startPosition_;
    endPosition_ = other.endPosition_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapField Clone() {
    return new MapField(this);
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 1;
  private string label_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Label {
    get { return label_; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "show" field.</summary>
  public const int ShowFieldNumber = 2;
  private bool show_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Show {
    get { return show_; }
    set {
      show_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_color_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> color_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Color {
    get { return color_; }
  }

  /// <summary>Field number for the "datatype" field.</summary>
  public const int DatatypeFieldNumber = 4;
  private global::MapDataType datatype_ = global::MapDataType.MapInt8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MapDataType Datatype {
    get { return datatype_; }
    set {
      datatype_ = value;
    }
  }

  /// <summary>Field number for the "image_w" field.</summary>
  public const int ImageWFieldNumber = 5;
  private int imageW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ImageW {
    get { return imageW_; }
    set {
      imageW_ = value;
    }
  }

  /// <summary>Field number for the "image_h" field.</summary>
  public const int ImageHFieldNumber = 6;
  private int imageH_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ImageH {
    get { return imageH_; }
    set {
      imageH_ = value;
    }
  }

  /// <summary>Field number for the "image_c" field.</summary>
  public const int ImageCFieldNumber = 7;
  private int imageC_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ImageC {
    get { return imageC_; }
    set {
      imageC_ = value;
    }
  }

  /// <summary>Field number for the "start_position" field.</summary>
  public const int StartPositionFieldNumber = 8;
  private int startPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StartPosition {
    get { return startPosition_; }
    set {
      startPosition_ = value;
    }
  }

  /// <summary>Field number for the "end_position" field.</summary>
  public const int EndPositionFieldNumber = 9;
  private int endPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EndPosition {
    get { return endPosition_; }
    set {
      endPosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MapField);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MapField other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Label != other.Label) return false;
    if (Show != other.Show) return false;
    if(!color_.Equals(other.color_)) return false;
    if (Datatype != other.Datatype) return false;
    if (ImageW != other.ImageW) return false;
    if (ImageH != other.ImageH) return false;
    if (ImageC != other.ImageC) return false;
    if (StartPosition != other.StartPosition) return false;
    if (EndPosition != other.EndPosition) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Label.Length != 0) hash ^= Label.GetHashCode();
    if (Show != false) hash ^= Show.GetHashCode();
    hash ^= color_.GetHashCode();
    if (Datatype != global::MapDataType.MapInt8) hash ^= Datatype.GetHashCode();
    if (ImageW != 0) hash ^= ImageW.GetHashCode();
    if (ImageH != 0) hash ^= ImageH.GetHashCode();
    if (ImageC != 0) hash ^= ImageC.GetHashCode();
    if (StartPosition != 0) hash ^= StartPosition.GetHashCode();
    if (EndPosition != 0) hash ^= EndPosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Label.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Label);
    }
    if (Show != false) {
      output.WriteRawTag(16);
      output.WriteBool(Show);
    }
    color_.WriteTo(output, _repeated_color_codec);
    if (Datatype != global::MapDataType.MapInt8) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Datatype);
    }
    if (ImageW != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ImageW);
    }
    if (ImageH != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ImageH);
    }
    if (ImageC != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ImageC);
    }
    if (StartPosition != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(StartPosition);
    }
    if (EndPosition != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(EndPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Label.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Label);
    }
    if (Show != false) {
      output.WriteRawTag(16);
      output.WriteBool(Show);
    }
    color_.WriteTo(ref output, _repeated_color_codec);
    if (Datatype != global::MapDataType.MapInt8) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Datatype);
    }
    if (ImageW != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ImageW);
    }
    if (ImageH != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ImageH);
    }
    if (ImageC != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ImageC);
    }
    if (StartPosition != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(StartPosition);
    }
    if (EndPosition != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(EndPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Label.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (Show != false) {
      size += 1 + 1;
    }
    size += color_.CalculateSize(_repeated_color_codec);
    if (Datatype != global::MapDataType.MapInt8) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Datatype);
    }
    if (ImageW != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageW);
    }
    if (ImageH != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageH);
    }
    if (ImageC != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageC);
    }
    if (StartPosition != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPosition);
    }
    if (EndPosition != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MapField other) {
    if (other == null) {
      return;
    }
    if (other.Label.Length != 0) {
      Label = other.Label;
    }
    if (other.Show != false) {
      Show = other.Show;
    }
    color_.Add(other.color_);
    if (other.Datatype != global::MapDataType.MapInt8) {
      Datatype = other.Datatype;
    }
    if (other.ImageW != 0) {
      ImageW = other.ImageW;
    }
    if (other.ImageH != 0) {
      ImageH = other.ImageH;
    }
    if (other.ImageC != 0) {
      ImageC = other.ImageC;
    }
    if (other.StartPosition != 0) {
      StartPosition = other.StartPosition;
    }
    if (other.EndPosition != 0) {
      EndPosition = other.EndPosition;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Label = input.ReadString();
          break;
        }
        case 16: {
          Show = input.ReadBool();
          break;
        }
        case 26:
        case 24: {
          color_.AddEntriesFrom(input, _repeated_color_codec);
          break;
        }
        case 32: {
          Datatype = (global::MapDataType) input.ReadEnum();
          break;
        }
        case 40: {
          ImageW = input.ReadInt32();
          break;
        }
        case 48: {
          ImageH = input.ReadInt32();
          break;
        }
        case 56: {
          ImageC = input.ReadInt32();
          break;
        }
        case 64: {
          StartPosition = input.ReadInt32();
          break;
        }
        case 72: {
          EndPosition = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Label = input.ReadString();
          break;
        }
        case 16: {
          Show = input.ReadBool();
          break;
        }
        case 26:
        case 24: {
          color_.AddEntriesFrom(ref input, _repeated_color_codec);
          break;
        }
        case 32: {
          Datatype = (global::MapDataType) input.ReadEnum();
          break;
        }
        case 40: {
          ImageW = input.ReadInt32();
          break;
        }
        case 48: {
          ImageH = input.ReadInt32();
          break;
        }
        case 56: {
          ImageC = input.ReadInt32();
          break;
        }
        case 64: {
          StartPosition = input.ReadInt32();
          break;
        }
        case 72: {
          EndPosition = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ResultField : pb::IMessage<ResultField>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ResultField> _parser = new pb::MessageParser<ResultField>(() => new ResultField());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResultField> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResultField() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResultField(ResultField other) : this() {
    modelLabel_ = other.modelLabel_;
    modelTag_ = other.modelTag_;
    modelId_ = other.modelId_;
    classifier_ = other.classifier_;
    evaluationTimeMs_ = other.evaluationTimeMs_;
    postProcessingTimeMs_ = other.postProcessingTimeMs_;
    resultMap_ = other.resultMap_.Clone();
    feature_ = other.feature_.Clone();
    tenant_ = other.tenant_;
    tenantId_ = other.tenantId_;
    onnxVersionMajor_ = other.onnxVersionMajor_;
    onnxVersionMinor_ = other.onnxVersionMinor_;
    featureUid_ = other.featureUid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResultField Clone() {
    return new ResultField(this);
  }

  /// <summary>Field number for the "model_label" field.</summary>
  public const int ModelLabelFieldNumber = 1;
  private string modelLabel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModelLabel {
    get { return modelLabel_; }
    set {
      modelLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "model_tag" field.</summary>
  public const int ModelTagFieldNumber = 2;
  private string modelTag_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModelTag {
    get { return modelTag_; }
    set {
      modelTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "model_id" field.</summary>
  public const int ModelIdFieldNumber = 3;
  private int modelId_;
  /// <summary>
  /// deprecated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ModelId {
    get { return modelId_; }
    set {
      modelId_ = value;
    }
  }

  /// <summary>Field number for the "classifier" field.</summary>
  public const int ClassifierFieldNumber = 4;
  private double classifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Classifier {
    get { return classifier_; }
    set {
      classifier_ = value;
    }
  }

  /// <summary>Field number for the "evaluation_time_ms" field.</summary>
  public const int EvaluationTimeMsFieldNumber = 5;
  private double evaluationTimeMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double EvaluationTimeMs {
    get { return evaluationTimeMs_; }
    set {
      evaluationTimeMs_ = value;
    }
  }

  /// <summary>Field number for the "post_processing_time_ms" field.</summary>
  public const int PostProcessingTimeMsFieldNumber = 6;
  private double postProcessingTimeMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double PostProcessingTimeMs {
    get { return postProcessingTimeMs_; }
    set {
      postProcessingTimeMs_ = value;
    }
  }

  /// <summary>Field number for the "result_map" field.</summary>
  public const int ResultMapFieldNumber = 7;
  private static readonly pb::FieldCodec<global::MapField> _repeated_resultMap_codec
      = pb::FieldCodec.ForMessage(58, global::MapField.Parser);
  private readonly pbc::RepeatedField<global::MapField> resultMap_ = new pbc::RepeatedField<global::MapField>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MapField> ResultMap {
    get { return resultMap_; }
  }

  /// <summary>Field number for the "feature" field.</summary>
  public const int FeatureFieldNumber = 8;
  private static readonly pb::FieldCodec<global::FeatureField> _repeated_feature_codec
      = pb::FieldCodec.ForMessage(66, global::FeatureField.Parser);
  private readonly pbc::RepeatedField<global::FeatureField> feature_ = new pbc::RepeatedField<global::FeatureField>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FeatureField> Feature {
    get { return feature_; }
  }

  /// <summary>Field number for the "tenant" field.</summary>
  public const int TenantFieldNumber = 9;
  private string tenant_ = "";
  /// <summary>
  /// Used for communicating the tenant to the main program
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Tenant {
    get { return tenant_; }
    set {
      tenant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tenant_id" field.</summary>
  public const int TenantIdFieldNumber = 10;
  private string tenantId_ = "";
  /// <summary>
  /// Used for communicating the tenant-ID to the main program
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TenantId {
    get { return tenantId_; }
    set {
      tenantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "onnx_version_major" field.</summary>
  public const int OnnxVersionMajorFieldNumber = 11;
  private int onnxVersionMajor_;
  /// <summary>
  /// Used for communicating the network onnx version to the main program
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnnxVersionMajor {
    get { return onnxVersionMajor_; }
    set {
      onnxVersionMajor_ = value;
    }
  }

  /// <summary>Field number for the "onnx_version_minor" field.</summary>
  public const int OnnxVersionMinorFieldNumber = 12;
  private int onnxVersionMinor_;
  /// <summary>
  /// Used for communicating the network onnx version to the main program
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnnxVersionMinor {
    get { return onnxVersionMinor_; }
    set {
      onnxVersionMinor_ = value;
    }
  }

  /// <summary>Field number for the "feature_uid" field.</summary>
  public const int FeatureUidFieldNumber = 13;
  private string featureUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FeatureUid {
    get { return featureUid_; }
    set {
      featureUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResultField);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResultField other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ModelLabel != other.ModelLabel) return false;
    if (ModelTag != other.ModelTag) return false;
    if (ModelId != other.ModelId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Classifier, other.Classifier)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EvaluationTimeMs, other.EvaluationTimeMs)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PostProcessingTimeMs, other.PostProcessingTimeMs)) return false;
    if(!resultMap_.Equals(other.resultMap_)) return false;
    if(!feature_.Equals(other.feature_)) return false;
    if (Tenant != other.Tenant) return false;
    if (TenantId != other.TenantId) return false;
    if (OnnxVersionMajor != other.OnnxVersionMajor) return false;
    if (OnnxVersionMinor != other.OnnxVersionMinor) return false;
    if (FeatureUid != other.FeatureUid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ModelLabel.Length != 0) hash ^= ModelLabel.GetHashCode();
    if (ModelTag.Length != 0) hash ^= ModelTag.GetHashCode();
    if (ModelId != 0) hash ^= ModelId.GetHashCode();
    if (Classifier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Classifier);
    if (EvaluationTimeMs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EvaluationTimeMs);
    if (PostProcessingTimeMs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PostProcessingTimeMs);
    hash ^= resultMap_.GetHashCode();
    hash ^= feature_.GetHashCode();
    if (Tenant.Length != 0) hash ^= Tenant.GetHashCode();
    if (TenantId.Length != 0) hash ^= TenantId.GetHashCode();
    if (OnnxVersionMajor != 0) hash ^= OnnxVersionMajor.GetHashCode();
    if (OnnxVersionMinor != 0) hash ^= OnnxVersionMinor.GetHashCode();
    if (FeatureUid.Length != 0) hash ^= FeatureUid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ModelLabel.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ModelLabel);
    }
    if (ModelTag.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ModelTag);
    }
    if (ModelId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ModelId);
    }
    if (Classifier != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Classifier);
    }
    if (EvaluationTimeMs != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(EvaluationTimeMs);
    }
    if (PostProcessingTimeMs != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(PostProcessingTimeMs);
    }
    resultMap_.WriteTo(output, _repeated_resultMap_codec);
    feature_.WriteTo(output, _repeated_feature_codec);
    if (Tenant.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Tenant);
    }
    if (TenantId.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(TenantId);
    }
    if (OnnxVersionMajor != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(OnnxVersionMajor);
    }
    if (OnnxVersionMinor != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(OnnxVersionMinor);
    }
    if (FeatureUid.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(FeatureUid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ModelLabel.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ModelLabel);
    }
    if (ModelTag.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ModelTag);
    }
    if (ModelId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ModelId);
    }
    if (Classifier != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Classifier);
    }
    if (EvaluationTimeMs != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(EvaluationTimeMs);
    }
    if (PostProcessingTimeMs != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(PostProcessingTimeMs);
    }
    resultMap_.WriteTo(ref output, _repeated_resultMap_codec);
    feature_.WriteTo(ref output, _repeated_feature_codec);
    if (Tenant.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Tenant);
    }
    if (TenantId.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(TenantId);
    }
    if (OnnxVersionMajor != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(OnnxVersionMajor);
    }
    if (OnnxVersionMinor != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(OnnxVersionMinor);
    }
    if (FeatureUid.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(FeatureUid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ModelLabel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelLabel);
    }
    if (ModelTag.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelTag);
    }
    if (ModelId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
    }
    if (Classifier != 0D) {
      size += 1 + 8;
    }
    if (EvaluationTimeMs != 0D) {
      size += 1 + 8;
    }
    if (PostProcessingTimeMs != 0D) {
      size += 1 + 8;
    }
    size += resultMap_.CalculateSize(_repeated_resultMap_codec);
    size += feature_.CalculateSize(_repeated_feature_codec);
    if (Tenant.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Tenant);
    }
    if (TenantId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TenantId);
    }
    if (OnnxVersionMajor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnnxVersionMajor);
    }
    if (OnnxVersionMinor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnnxVersionMinor);
    }
    if (FeatureUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureUid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResultField other) {
    if (other == null) {
      return;
    }
    if (other.ModelLabel.Length != 0) {
      ModelLabel = other.ModelLabel;
    }
    if (other.ModelTag.Length != 0) {
      ModelTag = other.ModelTag;
    }
    if (other.ModelId != 0) {
      ModelId = other.ModelId;
    }
    if (other.Classifier != 0D) {
      Classifier = other.Classifier;
    }
    if (other.EvaluationTimeMs != 0D) {
      EvaluationTimeMs = other.EvaluationTimeMs;
    }
    if (other.PostProcessingTimeMs != 0D) {
      PostProcessingTimeMs = other.PostProcessingTimeMs;
    }
    resultMap_.Add(other.resultMap_);
    feature_.Add(other.feature_);
    if (other.Tenant.Length != 0) {
      Tenant = other.Tenant;
    }
    if (other.TenantId.Length != 0) {
      TenantId = other.TenantId;
    }
    if (other.OnnxVersionMajor != 0) {
      OnnxVersionMajor = other.OnnxVersionMajor;
    }
    if (other.OnnxVersionMinor != 0) {
      OnnxVersionMinor = other.OnnxVersionMinor;
    }
    if (other.FeatureUid.Length != 0) {
      FeatureUid = other.FeatureUid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ModelLabel = input.ReadString();
          break;
        }
        case 18: {
          ModelTag = input.ReadString();
          break;
        }
        case 24: {
          ModelId = input.ReadInt32();
          break;
        }
        case 33: {
          Classifier = input.ReadDouble();
          break;
        }
        case 41: {
          EvaluationTimeMs = input.ReadDouble();
          break;
        }
        case 49: {
          PostProcessingTimeMs = input.ReadDouble();
          break;
        }
        case 58: {
          resultMap_.AddEntriesFrom(input, _repeated_resultMap_codec);
          break;
        }
        case 66: {
          feature_.AddEntriesFrom(input, _repeated_feature_codec);
          break;
        }
        case 74: {
          Tenant = input.ReadString();
          break;
        }
        case 82: {
          TenantId = input.ReadString();
          break;
        }
        case 88: {
          OnnxVersionMajor = input.ReadInt32();
          break;
        }
        case 96: {
          OnnxVersionMinor = input.ReadInt32();
          break;
        }
        case 106: {
          FeatureUid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ModelLabel = input.ReadString();
          break;
        }
        case 18: {
          ModelTag = input.ReadString();
          break;
        }
        case 24: {
          ModelId = input.ReadInt32();
          break;
        }
        case 33: {
          Classifier = input.ReadDouble();
          break;
        }
        case 41: {
          EvaluationTimeMs = input.ReadDouble();
          break;
        }
        case 49: {
          PostProcessingTimeMs = input.ReadDouble();
          break;
        }
        case 58: {
          resultMap_.AddEntriesFrom(ref input, _repeated_resultMap_codec);
          break;
        }
        case 66: {
          feature_.AddEntriesFrom(ref input, _repeated_feature_codec);
          break;
        }
        case 74: {
          Tenant = input.ReadString();
          break;
        }
        case 82: {
          TenantId = input.ReadString();
          break;
        }
        case 88: {
          OnnxVersionMajor = input.ReadInt32();
          break;
        }
        case 96: {
          OnnxVersionMinor = input.ReadInt32();
          break;
        }
        case 106: {
          FeatureUid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Summary : pb::IMessage<Summary>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Summary> _parser = new pb::MessageParser<Summary>(() => new Summary());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Summary> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Summary() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Summary(Summary other) : this() {
    imageClass_ = other.imageClass_;
    classCode_ = other.classCode_;
    mostRelevantDefect_ = other.mostRelevantDefect_;
    relevantDefectsJson_ = other.relevantDefectsJson_;
    featureTableJson_ = other.featureTableJson_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Summary Clone() {
    return new Summary(this);
  }

  /// <summary>Field number for the "image_class" field.</summary>
  public const int ImageClassFieldNumber = 1;
  private int imageClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ImageClass {
    get { return imageClass_; }
    set {
      imageClass_ = value;
    }
  }

  /// <summary>Field number for the "class_code" field.</summary>
  public const int ClassCodeFieldNumber = 2;
  private string classCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClassCode {
    get { return classCode_; }
    set {
      classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "most_relevant_defect" field.</summary>
  public const int MostRelevantDefectFieldNumber = 3;
  private string mostRelevantDefect_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MostRelevantDefect {
    get { return mostRelevantDefect_; }
    set {
      mostRelevantDefect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "relevant_defects_json" field.</summary>
  public const int RelevantDefectsJsonFieldNumber = 4;
  private string relevantDefectsJson_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RelevantDefectsJson {
    get { return relevantDefectsJson_; }
    set {
      relevantDefectsJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "feature_table_json" field.</summary>
  public const int FeatureTableJsonFieldNumber = 5;
  private string featureTableJson_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FeatureTableJson {
    get { return featureTableJson_; }
    set {
      featureTableJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Summary);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Summary other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ImageClass != other.ImageClass) return false;
    if (ClassCode != other.ClassCode) return false;
    if (MostRelevantDefect != other.MostRelevantDefect) return false;
    if (RelevantDefectsJson != other.RelevantDefectsJson) return false;
    if (FeatureTableJson != other.FeatureTableJson) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ImageClass != 0) hash ^= ImageClass.GetHashCode();
    if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
    if (MostRelevantDefect.Length != 0) hash ^= MostRelevantDefect.GetHashCode();
    if (RelevantDefectsJson.Length != 0) hash ^= RelevantDefectsJson.GetHashCode();
    if (FeatureTableJson.Length != 0) hash ^= FeatureTableJson.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ImageClass != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ImageClass);
    }
    if (ClassCode.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ClassCode);
    }
    if (MostRelevantDefect.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MostRelevantDefect);
    }
    if (RelevantDefectsJson.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RelevantDefectsJson);
    }
    if (FeatureTableJson.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(FeatureTableJson);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ImageClass != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ImageClass);
    }
    if (ClassCode.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ClassCode);
    }
    if (MostRelevantDefect.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MostRelevantDefect);
    }
    if (RelevantDefectsJson.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RelevantDefectsJson);
    }
    if (FeatureTableJson.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(FeatureTableJson);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ImageClass != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageClass);
    }
    if (ClassCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
    }
    if (MostRelevantDefect.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MostRelevantDefect);
    }
    if (RelevantDefectsJson.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RelevantDefectsJson);
    }
    if (FeatureTableJson.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureTableJson);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Summary other) {
    if (other == null) {
      return;
    }
    if (other.ImageClass != 0) {
      ImageClass = other.ImageClass;
    }
    if (other.ClassCode.Length != 0) {
      ClassCode = other.ClassCode;
    }
    if (other.MostRelevantDefect.Length != 0) {
      MostRelevantDefect = other.MostRelevantDefect;
    }
    if (other.RelevantDefectsJson.Length != 0) {
      RelevantDefectsJson = other.RelevantDefectsJson;
    }
    if (other.FeatureTableJson.Length != 0) {
      FeatureTableJson = other.FeatureTableJson;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ImageClass = input.ReadInt32();
          break;
        }
        case 18: {
          ClassCode = input.ReadString();
          break;
        }
        case 26: {
          MostRelevantDefect = input.ReadString();
          break;
        }
        case 34: {
          RelevantDefectsJson = input.ReadString();
          break;
        }
        case 42: {
          FeatureTableJson = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ImageClass = input.ReadInt32();
          break;
        }
        case 18: {
          ClassCode = input.ReadString();
          break;
        }
        case 26: {
          MostRelevantDefect = input.ReadString();
          break;
        }
        case 34: {
          RelevantDefectsJson = input.ReadString();
          break;
        }
        case 42: {
          FeatureTableJson = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class FeatureInfo : pb::IMessage<FeatureInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<FeatureInfo> _parser = new pb::MessageParser<FeatureInfo>(() => new FeatureInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FeatureInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeatureInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeatureInfo(FeatureInfo other) : this() {
    featureUid_ = other.featureUid_;
    featureName_ = other.featureName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeatureInfo Clone() {
    return new FeatureInfo(this);
  }

  /// <summary>Field number for the "feature_uid" field.</summary>
  public const int FeatureUidFieldNumber = 1;
  private string featureUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FeatureUid {
    get { return featureUid_; }
    set {
      featureUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "feature_name" field.</summary>
  public const int FeatureNameFieldNumber = 2;
  private string featureName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FeatureName {
    get { return featureName_; }
    set {
      featureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FeatureInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FeatureInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FeatureUid != other.FeatureUid) return false;
    if (FeatureName != other.FeatureName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FeatureUid.Length != 0) hash ^= FeatureUid.GetHashCode();
    if (FeatureName.Length != 0) hash ^= FeatureName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (FeatureUid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(FeatureUid);
    }
    if (FeatureName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(FeatureName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (FeatureUid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(FeatureUid);
    }
    if (FeatureName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(FeatureName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FeatureUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureUid);
    }
    if (FeatureName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FeatureInfo other) {
    if (other == null) {
      return;
    }
    if (other.FeatureUid.Length != 0) {
      FeatureUid = other.FeatureUid;
    }
    if (other.FeatureName.Length != 0) {
      FeatureName = other.FeatureName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          FeatureUid = input.ReadString();
          break;
        }
        case 18: {
          FeatureName = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          FeatureUid = input.ReadString();
          break;
        }
        case 18: {
          FeatureName = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ModelInfo : pb::IMessage<ModelInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ModelInfo> _parser = new pb::MessageParser<ModelInfo>(() => new ModelInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModelInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelInfo(ModelInfo other) : this() {
    modelUid_ = other.modelUid_;
    modelName_ = other.modelName_;
    features_ = other.features_.Clone();
    tenant_ = other.tenant_;
    tenantUid_ = other.tenantUid_;
    onnxVersionMajor_ = other.onnxVersionMajor_;
    onnxVersionMinor_ = other.onnxVersionMinor_;
    modelType_ = other.modelType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelInfo Clone() {
    return new ModelInfo(this);
  }

  /// <summary>Field number for the "model_uid" field.</summary>
  public const int ModelUidFieldNumber = 1;
  private string modelUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModelUid {
    get { return modelUid_; }
    set {
      modelUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "model_name" field.</summary>
  public const int ModelNameFieldNumber = 2;
  private string modelName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModelName {
    get { return modelName_; }
    set {
      modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "features" field.</summary>
  public const int FeaturesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::FeatureInfo> _repeated_features_codec
      = pb::FieldCodec.ForMessage(26, global::FeatureInfo.Parser);
  private readonly pbc::RepeatedField<global::FeatureInfo> features_ = new pbc::RepeatedField<global::FeatureInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FeatureInfo> Features {
    get { return features_; }
  }

  /// <summary>Field number for the "tenant" field.</summary>
  public const int TenantFieldNumber = 4;
  private string tenant_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Tenant {
    get { return tenant_; }
    set {
      tenant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tenant_uid" field.</summary>
  public const int TenantUidFieldNumber = 5;
  private string tenantUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TenantUid {
    get { return tenantUid_; }
    set {
      tenantUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "onnx_version_major" field.</summary>
  public const int OnnxVersionMajorFieldNumber = 6;
  private int onnxVersionMajor_;
  /// <summary>
  /// Used for communicating the network onnx version to the main program
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnnxVersionMajor {
    get { return onnxVersionMajor_; }
    set {
      onnxVersionMajor_ = value;
    }
  }

  /// <summary>Field number for the "onnx_version_minor" field.</summary>
  public const int OnnxVersionMinorFieldNumber = 7;
  private int onnxVersionMinor_;
  /// <summary>
  /// Used for communicating the network onnx version to the main program
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnnxVersionMinor {
    get { return onnxVersionMinor_; }
    set {
      onnxVersionMinor_ = value;
    }
  }

  /// <summary>Field number for the "model_type" field.</summary>
  public const int ModelTypeFieldNumber = 8;
  private global::ModelType modelType_ = global::ModelType.Regular;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModelType ModelType {
    get { return modelType_; }
    set {
      modelType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModelInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModelInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ModelUid != other.ModelUid) return false;
    if (ModelName != other.ModelName) return false;
    if(!features_.Equals(other.features_)) return false;
    if (Tenant != other.Tenant) return false;
    if (TenantUid != other.TenantUid) return false;
    if (OnnxVersionMajor != other.OnnxVersionMajor) return false;
    if (OnnxVersionMinor != other.OnnxVersionMinor) return false;
    if (ModelType != other.ModelType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ModelUid.Length != 0) hash ^= ModelUid.GetHashCode();
    if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
    hash ^= features_.GetHashCode();
    if (Tenant.Length != 0) hash ^= Tenant.GetHashCode();
    if (TenantUid.Length != 0) hash ^= TenantUid.GetHashCode();
    if (OnnxVersionMajor != 0) hash ^= OnnxVersionMajor.GetHashCode();
    if (OnnxVersionMinor != 0) hash ^= OnnxVersionMinor.GetHashCode();
    if (ModelType != global::ModelType.Regular) hash ^= ModelType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ModelUid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ModelUid);
    }
    if (ModelName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ModelName);
    }
    features_.WriteTo(output, _repeated_features_codec);
    if (Tenant.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Tenant);
    }
    if (TenantUid.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(TenantUid);
    }
    if (OnnxVersionMajor != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(OnnxVersionMajor);
    }
    if (OnnxVersionMinor != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(OnnxVersionMinor);
    }
    if (ModelType != global::ModelType.Regular) {
      output.WriteRawTag(64);
      output.WriteEnum((int) ModelType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ModelUid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ModelUid);
    }
    if (ModelName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ModelName);
    }
    features_.WriteTo(ref output, _repeated_features_codec);
    if (Tenant.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Tenant);
    }
    if (TenantUid.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(TenantUid);
    }
    if (OnnxVersionMajor != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(OnnxVersionMajor);
    }
    if (OnnxVersionMinor != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(OnnxVersionMinor);
    }
    if (ModelType != global::ModelType.Regular) {
      output.WriteRawTag(64);
      output.WriteEnum((int) ModelType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ModelUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelUid);
    }
    if (ModelName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
    }
    size += features_.CalculateSize(_repeated_features_codec);
    if (Tenant.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Tenant);
    }
    if (TenantUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TenantUid);
    }
    if (OnnxVersionMajor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnnxVersionMajor);
    }
    if (OnnxVersionMinor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnnxVersionMinor);
    }
    if (ModelType != global::ModelType.Regular) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModelInfo other) {
    if (other == null) {
      return;
    }
    if (other.ModelUid.Length != 0) {
      ModelUid = other.ModelUid;
    }
    if (other.ModelName.Length != 0) {
      ModelName = other.ModelName;
    }
    features_.Add(other.features_);
    if (other.Tenant.Length != 0) {
      Tenant = other.Tenant;
    }
    if (other.TenantUid.Length != 0) {
      TenantUid = other.TenantUid;
    }
    if (other.OnnxVersionMajor != 0) {
      OnnxVersionMajor = other.OnnxVersionMajor;
    }
    if (other.OnnxVersionMinor != 0) {
      OnnxVersionMinor = other.OnnxVersionMinor;
    }
    if (other.ModelType != global::ModelType.Regular) {
      ModelType = other.ModelType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ModelUid = input.ReadString();
          break;
        }
        case 18: {
          ModelName = input.ReadString();
          break;
        }
        case 26: {
          features_.AddEntriesFrom(input, _repeated_features_codec);
          break;
        }
        case 34: {
          Tenant = input.ReadString();
          break;
        }
        case 42: {
          TenantUid = input.ReadString();
          break;
        }
        case 48: {
          OnnxVersionMajor = input.ReadInt32();
          break;
        }
        case 56: {
          OnnxVersionMinor = input.ReadInt32();
          break;
        }
        case 64: {
          ModelType = (global::ModelType) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ModelUid = input.ReadString();
          break;
        }
        case 18: {
          ModelName = input.ReadString();
          break;
        }
        case 26: {
          features_.AddEntriesFrom(ref input, _repeated_features_codec);
          break;
        }
        case 34: {
          Tenant = input.ReadString();
          break;
        }
        case 42: {
          TenantUid = input.ReadString();
          break;
        }
        case 48: {
          OnnxVersionMajor = input.ReadInt32();
          break;
        }
        case 56: {
          OnnxVersionMinor = input.ReadInt32();
          break;
        }
        case 64: {
          ModelType = (global::ModelType) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Results : pb::IMessage<Results>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Results> _parser = new pb::MessageParser<Results>(() => new Results());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Results> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Results() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Results(Results other) : this() {
    output_ = other.output_.Clone();
    originalImageW_ = other.originalImageW_;
    originalImageH_ = other.originalImageH_;
    originalImageC_ = other.originalImageC_;
    originalImageWMm_ = other.originalImageWMm_;
    originalImageHMm_ = other.originalImageHMm_;
    originalImageCMm_ = other.originalImageCMm_;
    meanGrayActiveArea_ = other.meanGrayActiveArea_;
    resultSummary_ = other.resultSummary_ != null ? other.resultSummary_.Clone() : null;
    minGrayActiveArea_ = other.minGrayActiveArea_;
    maxGrayActiveArea_ = other.maxGrayActiveArea_;
    availableModels_ = other.availableModels_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Results Clone() {
    return new Results(this);
  }

  /// <summary>Field number for the "output" field.</summary>
  public const int OutputFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ResultField> _repeated_output_codec
      = pb::FieldCodec.ForMessage(10, global::ResultField.Parser);
  private readonly pbc::RepeatedField<global::ResultField> output_ = new pbc::RepeatedField<global::ResultField>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ResultField> Output {
    get { return output_; }
  }

  /// <summary>Field number for the "original_image_w" field.</summary>
  public const int OriginalImageWFieldNumber = 2;
  private int originalImageW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OriginalImageW {
    get { return originalImageW_; }
    set {
      originalImageW_ = value;
    }
  }

  /// <summary>Field number for the "original_image_h" field.</summary>
  public const int OriginalImageHFieldNumber = 3;
  private int originalImageH_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OriginalImageH {
    get { return originalImageH_; }
    set {
      originalImageH_ = value;
    }
  }

  /// <summary>Field number for the "original_image_c" field.</summary>
  public const int OriginalImageCFieldNumber = 4;
  private int originalImageC_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OriginalImageC {
    get { return originalImageC_; }
    set {
      originalImageC_ = value;
    }
  }

  /// <summary>Field number for the "original_image_w_mm" field.</summary>
  public const int OriginalImageWMmFieldNumber = 5;
  private double originalImageWMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double OriginalImageWMm {
    get { return originalImageWMm_; }
    set {
      originalImageWMm_ = value;
    }
  }

  /// <summary>Field number for the "original_image_h_mm" field.</summary>
  public const int OriginalImageHMmFieldNumber = 6;
  private double originalImageHMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double OriginalImageHMm {
    get { return originalImageHMm_; }
    set {
      originalImageHMm_ = value;
    }
  }

  /// <summary>Field number for the "original_image_c_mm" field.</summary>
  public const int OriginalImageCMmFieldNumber = 7;
  private double originalImageCMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double OriginalImageCMm {
    get { return originalImageCMm_; }
    set {
      originalImageCMm_ = value;
    }
  }

  /// <summary>Field number for the "mean_gray_active_area" field.</summary>
  public const int MeanGrayActiveAreaFieldNumber = 8;
  private double meanGrayActiveArea_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MeanGrayActiveArea {
    get { return meanGrayActiveArea_; }
    set {
      meanGrayActiveArea_ = value;
    }
  }

  /// <summary>Field number for the "result_summary" field.</summary>
  public const int ResultSummaryFieldNumber = 9;
  private global::Summary resultSummary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Summary ResultSummary {
    get { return resultSummary_; }
    set {
      resultSummary_ = value;
    }
  }

  /// <summary>Field number for the "min_gray_active_area" field.</summary>
  public const int MinGrayActiveAreaFieldNumber = 10;
  private double minGrayActiveArea_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinGrayActiveArea {
    get { return minGrayActiveArea_; }
    set {
      minGrayActiveArea_ = value;
    }
  }

  /// <summary>Field number for the "max_gray_active_area" field.</summary>
  public const int MaxGrayActiveAreaFieldNumber = 11;
  private double maxGrayActiveArea_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MaxGrayActiveArea {
    get { return maxGrayActiveArea_; }
    set {
      maxGrayActiveArea_ = value;
    }
  }

  /// <summary>Field number for the "available_models" field.</summary>
  public const int AvailableModelsFieldNumber = 12;
  private static readonly pb::FieldCodec<global::ModelInfo> _repeated_availableModels_codec
      = pb::FieldCodec.ForMessage(98, global::ModelInfo.Parser);
  private readonly pbc::RepeatedField<global::ModelInfo> availableModels_ = new pbc::RepeatedField<global::ModelInfo>();
  /// <summary>
  /// Used for communicating the available models to the main program
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ModelInfo> AvailableModels {
    get { return availableModels_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Results);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Results other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!output_.Equals(other.output_)) return false;
    if (OriginalImageW != other.OriginalImageW) return false;
    if (OriginalImageH != other.OriginalImageH) return false;
    if (OriginalImageC != other.OriginalImageC) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OriginalImageWMm, other.OriginalImageWMm)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OriginalImageHMm, other.OriginalImageHMm)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OriginalImageCMm, other.OriginalImageCMm)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MeanGrayActiveArea, other.MeanGrayActiveArea)) return false;
    if (!object.Equals(ResultSummary, other.ResultSummary)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinGrayActiveArea, other.MinGrayActiveArea)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxGrayActiveArea, other.MaxGrayActiveArea)) return false;
    if(!availableModels_.Equals(other.availableModels_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= output_.GetHashCode();
    if (OriginalImageW != 0) hash ^= OriginalImageW.GetHashCode();
    if (OriginalImageH != 0) hash ^= OriginalImageH.GetHashCode();
    if (OriginalImageC != 0) hash ^= OriginalImageC.GetHashCode();
    if (OriginalImageWMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OriginalImageWMm);
    if (OriginalImageHMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OriginalImageHMm);
    if (OriginalImageCMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OriginalImageCMm);
    if (MeanGrayActiveArea != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MeanGrayActiveArea);
    if (resultSummary_ != null) hash ^= ResultSummary.GetHashCode();
    if (MinGrayActiveArea != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinGrayActiveArea);
    if (MaxGrayActiveArea != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxGrayActiveArea);
    hash ^= availableModels_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    output_.WriteTo(output, _repeated_output_codec);
    if (OriginalImageW != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OriginalImageW);
    }
    if (OriginalImageH != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OriginalImageH);
    }
    if (OriginalImageC != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OriginalImageC);
    }
    if (OriginalImageWMm != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(OriginalImageWMm);
    }
    if (OriginalImageHMm != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(OriginalImageHMm);
    }
    if (OriginalImageCMm != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(OriginalImageCMm);
    }
    if (MeanGrayActiveArea != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(MeanGrayActiveArea);
    }
    if (resultSummary_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(ResultSummary);
    }
    if (MinGrayActiveArea != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(MinGrayActiveArea);
    }
    if (MaxGrayActiveArea != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(MaxGrayActiveArea);
    }
    availableModels_.WriteTo(output, _repeated_availableModels_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    output_.WriteTo(ref output, _repeated_output_codec);
    if (OriginalImageW != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OriginalImageW);
    }
    if (OriginalImageH != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OriginalImageH);
    }
    if (OriginalImageC != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OriginalImageC);
    }
    if (OriginalImageWMm != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(OriginalImageWMm);
    }
    if (OriginalImageHMm != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(OriginalImageHMm);
    }
    if (OriginalImageCMm != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(OriginalImageCMm);
    }
    if (MeanGrayActiveArea != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(MeanGrayActiveArea);
    }
    if (resultSummary_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(ResultSummary);
    }
    if (MinGrayActiveArea != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(MinGrayActiveArea);
    }
    if (MaxGrayActiveArea != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(MaxGrayActiveArea);
    }
    availableModels_.WriteTo(ref output, _repeated_availableModels_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += output_.CalculateSize(_repeated_output_codec);
    if (OriginalImageW != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalImageW);
    }
    if (OriginalImageH != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalImageH);
    }
    if (OriginalImageC != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalImageC);
    }
    if (OriginalImageWMm != 0D) {
      size += 1 + 8;
    }
    if (OriginalImageHMm != 0D) {
      size += 1 + 8;
    }
    if (OriginalImageCMm != 0D) {
      size += 1 + 8;
    }
    if (MeanGrayActiveArea != 0D) {
      size += 1 + 8;
    }
    if (resultSummary_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultSummary);
    }
    if (MinGrayActiveArea != 0D) {
      size += 1 + 8;
    }
    if (MaxGrayActiveArea != 0D) {
      size += 1 + 8;
    }
    size += availableModels_.CalculateSize(_repeated_availableModels_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Results other) {
    if (other == null) {
      return;
    }
    output_.Add(other.output_);
    if (other.OriginalImageW != 0) {
      OriginalImageW = other.OriginalImageW;
    }
    if (other.OriginalImageH != 0) {
      OriginalImageH = other.OriginalImageH;
    }
    if (other.OriginalImageC != 0) {
      OriginalImageC = other.OriginalImageC;
    }
    if (other.OriginalImageWMm != 0D) {
      OriginalImageWMm = other.OriginalImageWMm;
    }
    if (other.OriginalImageHMm != 0D) {
      OriginalImageHMm = other.OriginalImageHMm;
    }
    if (other.OriginalImageCMm != 0D) {
      OriginalImageCMm = other.OriginalImageCMm;
    }
    if (other.MeanGrayActiveArea != 0D) {
      MeanGrayActiveArea = other.MeanGrayActiveArea;
    }
    if (other.resultSummary_ != null) {
      if (resultSummary_ == null) {
        ResultSummary = new global::Summary();
      }
      ResultSummary.MergeFrom(other.ResultSummary);
    }
    if (other.MinGrayActiveArea != 0D) {
      MinGrayActiveArea = other.MinGrayActiveArea;
    }
    if (other.MaxGrayActiveArea != 0D) {
      MaxGrayActiveArea = other.MaxGrayActiveArea;
    }
    availableModels_.Add(other.availableModels_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          output_.AddEntriesFrom(input, _repeated_output_codec);
          break;
        }
        case 16: {
          OriginalImageW = input.ReadInt32();
          break;
        }
        case 24: {
          OriginalImageH = input.ReadInt32();
          break;
        }
        case 32: {
          OriginalImageC = input.ReadInt32();
          break;
        }
        case 41: {
          OriginalImageWMm = input.ReadDouble();
          break;
        }
        case 49: {
          OriginalImageHMm = input.ReadDouble();
          break;
        }
        case 57: {
          OriginalImageCMm = input.ReadDouble();
          break;
        }
        case 65: {
          MeanGrayActiveArea = input.ReadDouble();
          break;
        }
        case 74: {
          if (resultSummary_ == null) {
            ResultSummary = new global::Summary();
          }
          input.ReadMessage(ResultSummary);
          break;
        }
        case 81: {
          MinGrayActiveArea = input.ReadDouble();
          break;
        }
        case 89: {
          MaxGrayActiveArea = input.ReadDouble();
          break;
        }
        case 98: {
          availableModels_.AddEntriesFrom(input, _repeated_availableModels_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          output_.AddEntriesFrom(ref input, _repeated_output_codec);
          break;
        }
        case 16: {
          OriginalImageW = input.ReadInt32();
          break;
        }
        case 24: {
          OriginalImageH = input.ReadInt32();
          break;
        }
        case 32: {
          OriginalImageC = input.ReadInt32();
          break;
        }
        case 41: {
          OriginalImageWMm = input.ReadDouble();
          break;
        }
        case 49: {
          OriginalImageHMm = input.ReadDouble();
          break;
        }
        case 57: {
          OriginalImageCMm = input.ReadDouble();
          break;
        }
        case 65: {
          MeanGrayActiveArea = input.ReadDouble();
          break;
        }
        case 74: {
          if (resultSummary_ == null) {
            ResultSummary = new global::Summary();
          }
          input.ReadMessage(ResultSummary);
          break;
        }
        case 81: {
          MinGrayActiveArea = input.ReadDouble();
          break;
        }
        case 89: {
          MaxGrayActiveArea = input.ReadDouble();
          break;
        }
        case 98: {
          availableModels_.AddEntriesFrom(ref input, _repeated_availableModels_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// deprecated
/// </summary>
public sealed partial class ModelOptions : pb::IMessage<ModelOptions>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ModelOptions> _parser = new pb::MessageParser<ModelOptions>(() => new ModelOptions());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModelOptions> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelOptions() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelOptions(ModelOptions other) : this() {
    deactivated_ = other.deactivated_;
    minSegmentationThreshold_ = other.minSegmentationThreshold_;
    minGrayValue_ = other.minGrayValue_;
    maxGrayValue_ = other.maxGrayValue_;
    maxMeanGrayValue_ = other.maxMeanGrayValue_;
    minProbability_ = other.minProbability_;
    minLength_ = other.minLength_;
    minWidth_ = other.minWidth_;
    minHeight_ = other.minHeight_;
    minArea_ = other.minArea_;
    minImageClassifier_ = other.minImageClassifier_;
    deepGrayLevel_ = other.deepGrayLevel_;
    priority_ = other.priority_;
    onlyBoundingBoxes_ = other.onlyBoundingBoxes_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModelOptions Clone() {
    return new ModelOptions(this);
  }

  /// <summary>Field number for the "deactivated" field.</summary>
  public const int DeactivatedFieldNumber = 1;
  private bool deactivated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Deactivated {
    get { return deactivated_; }
    set {
      deactivated_ = value;
    }
  }

  /// <summary>Field number for the "minSegmentationThreshold" field.</summary>
  public const int MinSegmentationThresholdFieldNumber = 2;
  private double minSegmentationThreshold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinSegmentationThreshold {
    get { return minSegmentationThreshold_; }
    set {
      minSegmentationThreshold_ = value;
    }
  }

  /// <summary>Field number for the "minGrayValue" field.</summary>
  public const int MinGrayValueFieldNumber = 3;
  private double minGrayValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinGrayValue {
    get { return minGrayValue_; }
    set {
      minGrayValue_ = value;
    }
  }

  /// <summary>Field number for the "maxGrayValue" field.</summary>
  public const int MaxGrayValueFieldNumber = 4;
  private double maxGrayValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MaxGrayValue {
    get { return maxGrayValue_; }
    set {
      maxGrayValue_ = value;
    }
  }

  /// <summary>Field number for the "maxMeanGrayValue" field.</summary>
  public const int MaxMeanGrayValueFieldNumber = 5;
  private double maxMeanGrayValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MaxMeanGrayValue {
    get { return maxMeanGrayValue_; }
    set {
      maxMeanGrayValue_ = value;
    }
  }

  /// <summary>Field number for the "minProbability" field.</summary>
  public const int MinProbabilityFieldNumber = 6;
  private double minProbability_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinProbability {
    get { return minProbability_; }
    set {
      minProbability_ = value;
    }
  }

  /// <summary>Field number for the "minLength" field.</summary>
  public const int MinLengthFieldNumber = 7;
  private double minLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinLength {
    get { return minLength_; }
    set {
      minLength_ = value;
    }
  }

  /// <summary>Field number for the "minWidth" field.</summary>
  public const int MinWidthFieldNumber = 8;
  private double minWidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinWidth {
    get { return minWidth_; }
    set {
      minWidth_ = value;
    }
  }

  /// <summary>Field number for the "minHeight" field.</summary>
  public const int MinHeightFieldNumber = 9;
  private double minHeight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinHeight {
    get { return minHeight_; }
    set {
      minHeight_ = value;
    }
  }

  /// <summary>Field number for the "minArea" field.</summary>
  public const int MinAreaFieldNumber = 10;
  private double minArea_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinArea {
    get { return minArea_; }
    set {
      minArea_ = value;
    }
  }

  /// <summary>Field number for the "minImageClassifier" field.</summary>
  public const int MinImageClassifierFieldNumber = 11;
  private double minImageClassifier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double MinImageClassifier {
    get { return minImageClassifier_; }
    set {
      minImageClassifier_ = value;
    }
  }

  /// <summary>Field number for the "deepGrayLevel" field.</summary>
  public const int DeepGrayLevelFieldNumber = 12;
  private double deepGrayLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double DeepGrayLevel {
    get { return deepGrayLevel_; }
    set {
      deepGrayLevel_ = value;
    }
  }

  /// <summary>Field number for the "priority" field.</summary>
  public const int PriorityFieldNumber = 13;
  private int priority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Priority {
    get { return priority_; }
    set {
      priority_ = value;
    }
  }

  /// <summary>Field number for the "onlyBoundingBoxes" field.</summary>
  public const int OnlyBoundingBoxesFieldNumber = 14;
  private bool onlyBoundingBoxes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool OnlyBoundingBoxes {
    get { return onlyBoundingBoxes_; }
    set {
      onlyBoundingBoxes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModelOptions);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModelOptions other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Deactivated != other.Deactivated) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinSegmentationThreshold, other.MinSegmentationThreshold)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinGrayValue, other.MinGrayValue)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxGrayValue, other.MaxGrayValue)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxMeanGrayValue, other.MaxMeanGrayValue)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinProbability, other.MinProbability)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinLength, other.MinLength)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinWidth, other.MinWidth)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinHeight, other.MinHeight)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinArea, other.MinArea)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinImageClassifier, other.MinImageClassifier)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeepGrayLevel, other.DeepGrayLevel)) return false;
    if (Priority != other.Priority) return false;
    if (OnlyBoundingBoxes != other.OnlyBoundingBoxes) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Deactivated != false) hash ^= Deactivated.GetHashCode();
    if (MinSegmentationThreshold != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinSegmentationThreshold);
    if (MinGrayValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinGrayValue);
    if (MaxGrayValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxGrayValue);
    if (MaxMeanGrayValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxMeanGrayValue);
    if (MinProbability != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinProbability);
    if (MinLength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinLength);
    if (MinWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinWidth);
    if (MinHeight != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinHeight);
    if (MinArea != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinArea);
    if (MinImageClassifier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinImageClassifier);
    if (DeepGrayLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeepGrayLevel);
    if (Priority != 0) hash ^= Priority.GetHashCode();
    if (OnlyBoundingBoxes != false) hash ^= OnlyBoundingBoxes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Deactivated != false) {
      output.WriteRawTag(8);
      output.WriteBool(Deactivated);
    }
    if (MinSegmentationThreshold != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(MinSegmentationThreshold);
    }
    if (MinGrayValue != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(MinGrayValue);
    }
    if (MaxGrayValue != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(MaxGrayValue);
    }
    if (MaxMeanGrayValue != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(MaxMeanGrayValue);
    }
    if (MinProbability != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(MinProbability);
    }
    if (MinLength != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(MinLength);
    }
    if (MinWidth != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(MinWidth);
    }
    if (MinHeight != 0D) {
      output.WriteRawTag(73);
      output.WriteDouble(MinHeight);
    }
    if (MinArea != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(MinArea);
    }
    if (MinImageClassifier != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(MinImageClassifier);
    }
    if (DeepGrayLevel != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(DeepGrayLevel);
    }
    if (Priority != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Priority);
    }
    if (OnlyBoundingBoxes != false) {
      output.WriteRawTag(112);
      output.WriteBool(OnlyBoundingBoxes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Deactivated != false) {
      output.WriteRawTag(8);
      output.WriteBool(Deactivated);
    }
    if (MinSegmentationThreshold != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(MinSegmentationThreshold);
    }
    if (MinGrayValue != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(MinGrayValue);
    }
    if (MaxGrayValue != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(MaxGrayValue);
    }
    if (MaxMeanGrayValue != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(MaxMeanGrayValue);
    }
    if (MinProbability != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(MinProbability);
    }
    if (MinLength != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(MinLength);
    }
    if (MinWidth != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(MinWidth);
    }
    if (MinHeight != 0D) {
      output.WriteRawTag(73);
      output.WriteDouble(MinHeight);
    }
    if (MinArea != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(MinArea);
    }
    if (MinImageClassifier != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(MinImageClassifier);
    }
    if (DeepGrayLevel != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(DeepGrayLevel);
    }
    if (Priority != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Priority);
    }
    if (OnlyBoundingBoxes != false) {
      output.WriteRawTag(112);
      output.WriteBool(OnlyBoundingBoxes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Deactivated != false) {
      size += 1 + 1;
    }
    if (MinSegmentationThreshold != 0D) {
      size += 1 + 8;
    }
    if (MinGrayValue != 0D) {
      size += 1 + 8;
    }
    if (MaxGrayValue != 0D) {
      size += 1 + 8;
    }
    if (MaxMeanGrayValue != 0D) {
      size += 1 + 8;
    }
    if (MinProbability != 0D) {
      size += 1 + 8;
    }
    if (MinLength != 0D) {
      size += 1 + 8;
    }
    if (MinWidth != 0D) {
      size += 1 + 8;
    }
    if (MinHeight != 0D) {
      size += 1 + 8;
    }
    if (MinArea != 0D) {
      size += 1 + 8;
    }
    if (MinImageClassifier != 0D) {
      size += 1 + 8;
    }
    if (DeepGrayLevel != 0D) {
      size += 1 + 8;
    }
    if (Priority != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
    }
    if (OnlyBoundingBoxes != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModelOptions other) {
    if (other == null) {
      return;
    }
    if (other.Deactivated != false) {
      Deactivated = other.Deactivated;
    }
    if (other.MinSegmentationThreshold != 0D) {
      MinSegmentationThreshold = other.MinSegmentationThreshold;
    }
    if (other.MinGrayValue != 0D) {
      MinGrayValue = other.MinGrayValue;
    }
    if (other.MaxGrayValue != 0D) {
      MaxGrayValue = other.MaxGrayValue;
    }
    if (other.MaxMeanGrayValue != 0D) {
      MaxMeanGrayValue = other.MaxMeanGrayValue;
    }
    if (other.MinProbability != 0D) {
      MinProbability = other.MinProbability;
    }
    if (other.MinLength != 0D) {
      MinLength = other.MinLength;
    }
    if (other.MinWidth != 0D) {
      MinWidth = other.MinWidth;
    }
    if (other.MinHeight != 0D) {
      MinHeight = other.MinHeight;
    }
    if (other.MinArea != 0D) {
      MinArea = other.MinArea;
    }
    if (other.MinImageClassifier != 0D) {
      MinImageClassifier = other.MinImageClassifier;
    }
    if (other.DeepGrayLevel != 0D) {
      DeepGrayLevel = other.DeepGrayLevel;
    }
    if (other.Priority != 0) {
      Priority = other.Priority;
    }
    if (other.OnlyBoundingBoxes != false) {
      OnlyBoundingBoxes = other.OnlyBoundingBoxes;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Deactivated = input.ReadBool();
          break;
        }
        case 17: {
          MinSegmentationThreshold = input.ReadDouble();
          break;
        }
        case 25: {
          MinGrayValue = input.ReadDouble();
          break;
        }
        case 33: {
          MaxGrayValue = input.ReadDouble();
          break;
        }
        case 41: {
          MaxMeanGrayValue = input.ReadDouble();
          break;
        }
        case 49: {
          MinProbability = input.ReadDouble();
          break;
        }
        case 57: {
          MinLength = input.ReadDouble();
          break;
        }
        case 65: {
          MinWidth = input.ReadDouble();
          break;
        }
        case 73: {
          MinHeight = input.ReadDouble();
          break;
        }
        case 81: {
          MinArea = input.ReadDouble();
          break;
        }
        case 89: {
          MinImageClassifier = input.ReadDouble();
          break;
        }
        case 97: {
          DeepGrayLevel = input.ReadDouble();
          break;
        }
        case 104: {
          Priority = input.ReadInt32();
          break;
        }
        case 112: {
          OnlyBoundingBoxes = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Deactivated = input.ReadBool();
          break;
        }
        case 17: {
          MinSegmentationThreshold = input.ReadDouble();
          break;
        }
        case 25: {
          MinGrayValue = input.ReadDouble();
          break;
        }
        case 33: {
          MaxGrayValue = input.ReadDouble();
          break;
        }
        case 41: {
          MaxMeanGrayValue = input.ReadDouble();
          break;
        }
        case 49: {
          MinProbability = input.ReadDouble();
          break;
        }
        case 57: {
          MinLength = input.ReadDouble();
          break;
        }
        case 65: {
          MinWidth = input.ReadDouble();
          break;
        }
        case 73: {
          MinHeight = input.ReadDouble();
          break;
        }
        case 81: {
          MinArea = input.ReadDouble();
          break;
        }
        case 89: {
          MinImageClassifier = input.ReadDouble();
          break;
        }
        case 97: {
          DeepGrayLevel = input.ReadDouble();
          break;
        }
        case 104: {
          Priority = input.ReadInt32();
          break;
        }
        case 112: {
          OnlyBoundingBoxes = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// deprecated
/// </summary>
public sealed partial class OptionContainer : pb::IMessage<OptionContainer>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<OptionContainer> _parser = new pb::MessageParser<OptionContainer>(() => new OptionContainer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OptionContainer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptionContainer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptionContainer(OptionContainer other) : this() {
    options_ = other.options_.Clone();
    divisorW_ = other.divisorW_;
    divisorH_ = other.divisorH_;
    batchSize_ = other.batchSize_;
    networkImgPrescalingW_ = other.networkImgPrescalingW_;
    networkImgPrescalingH_ = other.networkImgPrescalingH_;
    networkImgPrescalingC_ = other.networkImgPrescalingC_;
    borderW_ = other.borderW_;
    borderH_ = other.borderH_;
    borderWR_ = other.borderWR_;
    borderHB_ = other.borderHB_;
    cellsW_ = other.cellsW_;
    cellsH_ = other.cellsH_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptionContainer Clone() {
    return new OptionContainer(this);
  }

  /// <summary>Field number for the "options" field.</summary>
  public const int OptionsFieldNumber = 1;
  private static readonly pbc::MapField<int, global::ModelOptions>.Codec _map_options_codec
      = new pbc::MapField<int, global::ModelOptions>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::ModelOptions.Parser), 10);
  private readonly pbc::MapField<int, global::ModelOptions> options_ = new pbc::MapField<int, global::ModelOptions>();
  /// <summary>
  /// maps the model_id to the options
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::ModelOptions> Options {
    get { return options_; }
  }

  /// <summary>Field number for the "divisor_w" field.</summary>
  public const int DivisorWFieldNumber = 2;
  private int divisorW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DivisorW {
    get { return divisorW_; }
    set {
      divisorW_ = value;
    }
  }

  /// <summary>Field number for the "divisor_h" field.</summary>
  public const int DivisorHFieldNumber = 3;
  private int divisorH_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DivisorH {
    get { return divisorH_; }
    set {
      divisorH_ = value;
    }
  }

  /// <summary>Field number for the "batch_size" field.</summary>
  public const int BatchSizeFieldNumber = 4;
  private int batchSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BatchSize {
    get { return batchSize_; }
    set {
      batchSize_ = value;
    }
  }

  /// <summary>Field number for the "network_img_prescaling_w" field.</summary>
  public const int NetworkImgPrescalingWFieldNumber = 5;
  private int networkImgPrescalingW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NetworkImgPrescalingW {
    get { return networkImgPrescalingW_; }
    set {
      networkImgPrescalingW_ = value;
    }
  }

  /// <summary>Field number for the "network_img_prescaling_h" field.</summary>
  public const int NetworkImgPrescalingHFieldNumber = 6;
  private int networkImgPrescalingH_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NetworkImgPrescalingH {
    get { return networkImgPrescalingH_; }
    set {
      networkImgPrescalingH_ = value;
    }
  }

  /// <summary>Field number for the "network_img_prescaling_c" field.</summary>
  public const int NetworkImgPrescalingCFieldNumber = 7;
  private int networkImgPrescalingC_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NetworkImgPrescalingC {
    get { return networkImgPrescalingC_; }
    set {
      networkImgPrescalingC_ = value;
    }
  }

  /// <summary>Field number for the "border_w" field.</summary>
  public const int BorderWFieldNumber = 8;
  private int borderW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BorderW {
    get { return borderW_; }
    set {
      borderW_ = value;
    }
  }

  /// <summary>Field number for the "border_h" field.</summary>
  public const int BorderHFieldNumber = 9;
  private int borderH_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BorderH {
    get { return borderH_; }
    set {
      borderH_ = value;
    }
  }

  /// <summary>Field number for the "border_w_r" field.</summary>
  public const int BorderWRFieldNumber = 10;
  private int borderWR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BorderWR {
    get { return borderWR_; }
    set {
      borderWR_ = value;
    }
  }

  /// <summary>Field number for the "border_h_b" field.</summary>
  public const int BorderHBFieldNumber = 11;
  private int borderHB_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BorderHB {
    get { return borderHB_; }
    set {
      borderHB_ = value;
    }
  }

  /// <summary>Field number for the "cells_w" field.</summary>
  public const int CellsWFieldNumber = 12;
  private int cellsW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CellsW {
    get { return cellsW_; }
    set {
      cellsW_ = value;
    }
  }

  /// <summary>Field number for the "cells_h" field.</summary>
  public const int CellsHFieldNumber = 13;
  private int cellsH_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CellsH {
    get { return cellsH_; }
    set {
      cellsH_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OptionContainer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OptionContainer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Options.Equals(other.Options)) return false;
    if (DivisorW != other.DivisorW) return false;
    if (DivisorH != other.DivisorH) return false;
    if (BatchSize != other.BatchSize) return false;
    if (NetworkImgPrescalingW != other.NetworkImgPrescalingW) return false;
    if (NetworkImgPrescalingH != other.NetworkImgPrescalingH) return false;
    if (NetworkImgPrescalingC != other.NetworkImgPrescalingC) return false;
    if (BorderW != other.BorderW) return false;
    if (BorderH != other.BorderH) return false;
    if (BorderWR != other.BorderWR) return false;
    if (BorderHB != other.BorderHB) return false;
    if (CellsW != other.CellsW) return false;
    if (CellsH != other.CellsH) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Options.GetHashCode();
    if (DivisorW != 0) hash ^= DivisorW.GetHashCode();
    if (DivisorH != 0) hash ^= DivisorH.GetHashCode();
    if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
    if (NetworkImgPrescalingW != 0) hash ^= NetworkImgPrescalingW.GetHashCode();
    if (NetworkImgPrescalingH != 0) hash ^= NetworkImgPrescalingH.GetHashCode();
    if (NetworkImgPrescalingC != 0) hash ^= NetworkImgPrescalingC.GetHashCode();
    if (BorderW != 0) hash ^= BorderW.GetHashCode();
    if (BorderH != 0) hash ^= BorderH.GetHashCode();
    if (BorderWR != 0) hash ^= BorderWR.GetHashCode();
    if (BorderHB != 0) hash ^= BorderHB.GetHashCode();
    if (CellsW != 0) hash ^= CellsW.GetHashCode();
    if (CellsH != 0) hash ^= CellsH.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    options_.WriteTo(output, _map_options_codec);
    if (DivisorW != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DivisorW);
    }
    if (DivisorH != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(DivisorH);
    }
    if (BatchSize != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BatchSize);
    }
    if (NetworkImgPrescalingW != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(NetworkImgPrescalingW);
    }
    if (NetworkImgPrescalingH != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(NetworkImgPrescalingH);
    }
    if (NetworkImgPrescalingC != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(NetworkImgPrescalingC);
    }
    if (BorderW != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BorderW);
    }
    if (BorderH != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(BorderH);
    }
    if (BorderWR != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BorderWR);
    }
    if (BorderHB != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(BorderHB);
    }
    if (CellsW != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(CellsW);
    }
    if (CellsH != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(CellsH);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    options_.WriteTo(ref output, _map_options_codec);
    if (DivisorW != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DivisorW);
    }
    if (DivisorH != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(DivisorH);
    }
    if (BatchSize != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BatchSize);
    }
    if (NetworkImgPrescalingW != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(NetworkImgPrescalingW);
    }
    if (NetworkImgPrescalingH != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(NetworkImgPrescalingH);
    }
    if (NetworkImgPrescalingC != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(NetworkImgPrescalingC);
    }
    if (BorderW != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BorderW);
    }
    if (BorderH != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(BorderH);
    }
    if (BorderWR != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BorderWR);
    }
    if (BorderHB != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(BorderHB);
    }
    if (CellsW != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(CellsW);
    }
    if (CellsH != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(CellsH);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += options_.CalculateSize(_map_options_codec);
    if (DivisorW != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DivisorW);
    }
    if (DivisorH != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DivisorH);
    }
    if (BatchSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSize);
    }
    if (NetworkImgPrescalingW != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkImgPrescalingW);
    }
    if (NetworkImgPrescalingH != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkImgPrescalingH);
    }
    if (NetworkImgPrescalingC != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkImgPrescalingC);
    }
    if (BorderW != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BorderW);
    }
    if (BorderH != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BorderH);
    }
    if (BorderWR != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BorderWR);
    }
    if (BorderHB != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BorderHB);
    }
    if (CellsW != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellsW);
    }
    if (CellsH != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellsH);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OptionContainer other) {
    if (other == null) {
      return;
    }
    options_.Add(other.options_);
    if (other.DivisorW != 0) {
      DivisorW = other.DivisorW;
    }
    if (other.DivisorH != 0) {
      DivisorH = other.DivisorH;
    }
    if (other.BatchSize != 0) {
      BatchSize = other.BatchSize;
    }
    if (other.NetworkImgPrescalingW != 0) {
      NetworkImgPrescalingW = other.NetworkImgPrescalingW;
    }
    if (other.NetworkImgPrescalingH != 0) {
      NetworkImgPrescalingH = other.NetworkImgPrescalingH;
    }
    if (other.NetworkImgPrescalingC != 0) {
      NetworkImgPrescalingC = other.NetworkImgPrescalingC;
    }
    if (other.BorderW != 0) {
      BorderW = other.BorderW;
    }
    if (other.BorderH != 0) {
      BorderH = other.BorderH;
    }
    if (other.BorderWR != 0) {
      BorderWR = other.BorderWR;
    }
    if (other.BorderHB != 0) {
      BorderHB = other.BorderHB;
    }
    if (other.CellsW != 0) {
      CellsW = other.CellsW;
    }
    if (other.CellsH != 0) {
      CellsH = other.CellsH;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          options_.AddEntriesFrom(input, _map_options_codec);
          break;
        }
        case 16: {
          DivisorW = input.ReadInt32();
          break;
        }
        case 24: {
          DivisorH = input.ReadInt32();
          break;
        }
        case 32: {
          BatchSize = input.ReadInt32();
          break;
        }
        case 40: {
          NetworkImgPrescalingW = input.ReadInt32();
          break;
        }
        case 48: {
          NetworkImgPrescalingH = input.ReadInt32();
          break;
        }
        case 56: {
          NetworkImgPrescalingC = input.ReadInt32();
          break;
        }
        case 64: {
          BorderW = input.ReadInt32();
          break;
        }
        case 72: {
          BorderH = input.ReadInt32();
          break;
        }
        case 80: {
          BorderWR = input.ReadInt32();
          break;
        }
        case 88: {
          BorderHB = input.ReadInt32();
          break;
        }
        case 96: {
          CellsW = input.ReadInt32();
          break;
        }
        case 104: {
          CellsH = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          options_.AddEntriesFrom(ref input, _map_options_codec);
          break;
        }
        case 16: {
          DivisorW = input.ReadInt32();
          break;
        }
        case 24: {
          DivisorH = input.ReadInt32();
          break;
        }
        case 32: {
          BatchSize = input.ReadInt32();
          break;
        }
        case 40: {
          NetworkImgPrescalingW = input.ReadInt32();
          break;
        }
        case 48: {
          NetworkImgPrescalingH = input.ReadInt32();
          break;
        }
        case 56: {
          NetworkImgPrescalingC = input.ReadInt32();
          break;
        }
        case 64: {
          BorderW = input.ReadInt32();
          break;
        }
        case 72: {
          BorderH = input.ReadInt32();
          break;
        }
        case 80: {
          BorderWR = input.ReadInt32();
          break;
        }
        case 88: {
          BorderHB = input.ReadInt32();
          break;
        }
        case 96: {
          CellsW = input.ReadInt32();
          break;
        }
        case 104: {
          CellsH = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// CPUs will only have their type and id set
/// </summary>
public sealed partial class Device : pb::IMessage<Device>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Device> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Device() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Device(Device other) : this() {
    deviceId_ = other.deviceId_;
    type_ = other.type_;
    name_ = other.name_;
    memorySize_ = other.memorySize_;
    integrated_ = other.integrated_;
    cudaUuid_ = other.cudaUuid_;
    cudaComputeCapabilityMajor_ = other.cudaComputeCapabilityMajor_;
    cudaComputeCapabilityMinor_ = other.cudaComputeCapabilityMinor_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Device Clone() {
    return new Device(this);
  }

  /// <summary>Field number for the "device_id" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private int deviceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::DeviceType type_ = global::DeviceType.Undefined;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "memory_size" field.</summary>
  public const int MemorySizeFieldNumber = 4;
  private long memorySize_;
  /// <summary>
  /// available GPU memory in bytes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MemorySize {
    get { return memorySize_; }
    set {
      memorySize_ = value;
    }
  }

  /// <summary>Field number for the "integrated" field.</summary>
  public const int IntegratedFieldNumber = 5;
  private bool integrated_;
  /// <summary>
  /// whether the GPU is integrated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Integrated {
    get { return integrated_; }
    set {
      integrated_ = value;
    }
  }

  /// <summary>Field number for the "cuda_uuid" field.</summary>
  public const int CudaUuidFieldNumber = 6;
  private string cudaUuid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CudaUuid {
    get { return cudaUuid_; }
    set {
      cudaUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "cuda_compute_capability_major" field.</summary>
  public const int CudaComputeCapabilityMajorFieldNumber = 7;
  private int cudaComputeCapabilityMajor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CudaComputeCapabilityMajor {
    get { return cudaComputeCapabilityMajor_; }
    set {
      cudaComputeCapabilityMajor_ = value;
    }
  }

  /// <summary>Field number for the "cuda_compute_capability_minor" field.</summary>
  public const int CudaComputeCapabilityMinorFieldNumber = 8;
  private int cudaComputeCapabilityMinor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CudaComputeCapabilityMinor {
    get { return cudaComputeCapabilityMinor_; }
    set {
      cudaComputeCapabilityMinor_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Device);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Device other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    if (MemorySize != other.MemorySize) return false;
    if (Integrated != other.Integrated) return false;
    if (CudaUuid != other.CudaUuid) return false;
    if (CudaComputeCapabilityMajor != other.CudaComputeCapabilityMajor) return false;
    if (CudaComputeCapabilityMinor != other.CudaComputeCapabilityMinor) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
    if (Type != global::DeviceType.Undefined) hash ^= Type.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (MemorySize != 0L) hash ^= MemorySize.GetHashCode();
    if (Integrated != false) hash ^= Integrated.GetHashCode();
    if (CudaUuid.Length != 0) hash ^= CudaUuid.GetHashCode();
    if (CudaComputeCapabilityMajor != 0) hash ^= CudaComputeCapabilityMajor.GetHashCode();
    if (CudaComputeCapabilityMinor != 0) hash ^= CudaComputeCapabilityMinor.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (DeviceId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DeviceId);
    }
    if (Type != global::DeviceType.Undefined) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (MemorySize != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(MemorySize);
    }
    if (Integrated != false) {
      output.WriteRawTag(40);
      output.WriteBool(Integrated);
    }
    if (CudaUuid.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(CudaUuid);
    }
    if (CudaComputeCapabilityMajor != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CudaComputeCapabilityMajor);
    }
    if (CudaComputeCapabilityMinor != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(CudaComputeCapabilityMinor);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (DeviceId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DeviceId);
    }
    if (Type != global::DeviceType.Undefined) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (MemorySize != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(MemorySize);
    }
    if (Integrated != false) {
      output.WriteRawTag(40);
      output.WriteBool(Integrated);
    }
    if (CudaUuid.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(CudaUuid);
    }
    if (CudaComputeCapabilityMajor != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CudaComputeCapabilityMajor);
    }
    if (CudaComputeCapabilityMinor != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(CudaComputeCapabilityMinor);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
    }
    if (Type != global::DeviceType.Undefined) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (MemorySize != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MemorySize);
    }
    if (Integrated != false) {
      size += 1 + 1;
    }
    if (CudaUuid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CudaUuid);
    }
    if (CudaComputeCapabilityMajor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CudaComputeCapabilityMajor);
    }
    if (CudaComputeCapabilityMinor != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CudaComputeCapabilityMinor);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Device other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Type != global::DeviceType.Undefined) {
      Type = other.Type;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.MemorySize != 0L) {
      MemorySize = other.MemorySize;
    }
    if (other.Integrated != false) {
      Integrated = other.Integrated;
    }
    if (other.CudaUuid.Length != 0) {
      CudaUuid = other.CudaUuid;
    }
    if (other.CudaComputeCapabilityMajor != 0) {
      CudaComputeCapabilityMajor = other.CudaComputeCapabilityMajor;
    }
    if (other.CudaComputeCapabilityMinor != 0) {
      CudaComputeCapabilityMinor = other.CudaComputeCapabilityMinor;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DeviceId = input.ReadInt32();
          break;
        }
        case 16: {
          Type = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          MemorySize = input.ReadInt64();
          break;
        }
        case 40: {
          Integrated = input.ReadBool();
          break;
        }
        case 50: {
          CudaUuid = input.ReadString();
          break;
        }
        case 56: {
          CudaComputeCapabilityMajor = input.ReadInt32();
          break;
        }
        case 64: {
          CudaComputeCapabilityMinor = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DeviceId = input.ReadInt32();
          break;
        }
        case 16: {
          Type = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          MemorySize = input.ReadInt64();
          break;
        }
        case 40: {
          Integrated = input.ReadBool();
          break;
        }
        case 50: {
          CudaUuid = input.ReadString();
          break;
        }
        case 56: {
          CudaComputeCapabilityMajor = input.ReadInt32();
          break;
        }
        case 64: {
          CudaComputeCapabilityMinor = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DeviceInformation : pb::IMessage<DeviceInformation>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DeviceInformation> _parser = new pb::MessageParser<DeviceInformation>(() => new DeviceInformation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeviceInformation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ResultsReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceInformation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceInformation(DeviceInformation other) : this() {
    device_ = other.device_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceInformation Clone() {
    return new DeviceInformation(this);
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Device> _repeated_device_codec
      = pb::FieldCodec.ForMessage(10, global::Device.Parser);
  private readonly pbc::RepeatedField<global::Device> device_ = new pbc::RepeatedField<global::Device>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Device> Device {
    get { return device_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeviceInformation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeviceInformation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!device_.Equals(other.device_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= device_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    device_.WriteTo(output, _repeated_device_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    device_.WriteTo(ref output, _repeated_device_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += device_.CalculateSize(_repeated_device_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeviceInformation other) {
    if (other == null) {
      return;
    }
    device_.Add(other.device_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          device_.AddEntriesFrom(input, _repeated_device_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          device_.AddEntriesFrom(ref input, _repeated_device_codec);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
